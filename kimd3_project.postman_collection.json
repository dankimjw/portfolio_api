{
	"info": {
		"_postman_id": "3ff9818a-2687-4ed0-a7f1-217f4055f11e",
		"name": "portfolio-kimd3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20244895"
	},
	"item": [
		{
			"name": "Auth, Admin, Users",
			"item": [
				{
					"name": "login - User 1 -JWT1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set('jwt1', pm.response.json()[\"id_token\"]);\r",
									"\r",
									"console.log(\"token: \", pm.environment.get(\"jwt1\"));\r",
									"\r",
									"pm.test(\"200 status code\", function () {\r",
									"    //Check for 200 status code\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"test@test.com\",\r\n    \"password\": \"testing123!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/login",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "login - User 2 -JWT2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set('jwt2', pm.response.json()[\"id_token\"]);\r",
									"\r",
									"console.log(\"jwt2: \", pm.environment.get(\"jwt2\"));\r",
									"pm.test(\"200 status code\", function () {\r",
									"    //Check for 200 status code\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"nemo@finding.com\",\r\n    \"password\": \"FindingNemo*\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/login",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "--- [Assign Sub Value] --- decode - User 1 - JWT1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 status code\", function () {\r",
									"    //Check for 200 status code\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"user_id1\",pm.response.json()[\"sub\"]);\r",
									"pm.environment.set(\"incorrect_token\",1);\r",
									"\r",
									"pm.test(\"content is valid\", function () {\r",
									"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"homer simpson\");\r",
									"    pm.expect(pm.response.json()[\"email\"]).to.eq(\"test@test.com\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/decode",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"decode"
							]
						}
					},
					"response": []
				},
				{
					"name": "decode - User 2 - JWT2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 status code\", function () {\r",
									"    //Check for 200 status code\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"user_id2\",pm.response.json()[\"sub\"]);\r",
									"pm.environment.set(\"incorrect_token\",1);\r",
									"\r",
									"pm.test(\"content is valid\", function () {\r",
									"    pm.expect(pm.response.json()[\"nickname\"]).to.eq(\"nemo\");\r",
									"    pm.expect(pm.response.json()[\"email\"]).to.eq(\"nemo@finding.com\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt2}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/decode",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"decode"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Users who is Admin [No Admins Yet]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 status code\", function () {\r",
									"    //Check for 200 status code\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/admin",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"admin"
							]
						}
					},
					"response": []
				},
				{
					"name": "---- [ADMINS]---- POST Incorrect Admin URL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"404 status code\", function () {\r",
									"    //Check for 404 status code\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{app_url}}/admin/helloworld",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"admin",
								"helloworld"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Incorrect Accept Header - Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"406 status code\", function () {\r",
									"    //Check for 406 status code\r",
									"    pm.response.to.have.status(406);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{app_url}}/admin",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"admin"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Make User 1 Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"201 status code\", function () {\r",
									"    //Check for 201 status code\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var user_content = pm.response.json();\r",
									"var user_id = user_content[\"sub\"];\r",
									"var user_admin_status = user_content[\"admin\"];\r",
									"\r",
									"pm.test(\"User ID matches req sender\",function(){\r",
									"    pm.expect(user_id).to.be.eql(pm.environment.get(\"user_id1\"));\r",
									"\r",
									"})\r",
									"pm.test(\"User admin status is True\",function(){\r",
									"    pm.expect(user_admin_status).to.be.true;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{app_url}}/admin",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"admin"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Make User 2 Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"201 status code\", function () {\r",
									"    //Check for 201 status code\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var user_content = pm.response.json();\r",
									"var user_id = user_content[\"sub\"];\r",
									"var user_admin_status = user_content[\"admin\"];\r",
									"\r",
									"pm.test(\"User ID matches req sender\",function(){\r",
									"    pm.expect(user_id).to.be.eql(pm.environment.get(\"user_id2\"));\r",
									"\r",
									"})\r",
									"pm.test(\"User admin status is True\",function(){\r",
									"    pm.expect(user_admin_status).to.be.true;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt2}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{app_url}}/admin",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"admin"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Make User 2 Admin when User 2 is already Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"400 status code\", function () {\r",
									"    //Check for 400 status code\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt2}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{app_url}}/admin",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"admin"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST [No JWT] Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"401 status code\", function () {\r",
									"    //Check for 401 status code\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{app_url}}/admin",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"admin"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST [Invalid JWT] Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"401 status code\", function () {\r",
									"    //Check for 401 status code\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{incorrect_jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{app_url}}/admin",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"admin"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH  [Not Allowed] Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"405 status code\", function () {\r",
									"    //Check for 405 status code\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{app_url}}/admin",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"admin"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT [Not Allowed] Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"405 status code\", function () {\r",
									"    //Check for 405 status code\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{app_url}}/admin",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"admin"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET [Valid JWT - Unregistered User] User who is Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"401 status code\", function () {\r",
									"    //Check for 401 status code\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt3}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/admin",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"admin"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET [Invalid JWT] User who is Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"401 status code\", function () {\r",
									"    //Check for 401 status code\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{incorrect_jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/admin",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"admin"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Incorrect Accept Header - Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"406 status code\", function () {\r",
									"    //Check for 406 status code\r",
									"    pm.response.to.have.status(406);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{app_url}}/admin",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"admin"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Users who is Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 status code\", function () {\r",
									"    //Check for 200 status code\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/admin",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"admin"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE User 1 Admin Access 1st",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 status code\", function () {\r",
									"    //Check for 204 status code\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/admin",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"admin"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Users who is Admin Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 status code\", function () {\r",
									"    //Check for 200 status code\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var user_content = pm.response.json();\r",
									"var admin_list = user_content[\"admins\"];\r",
									"var user_id = user_content[\"sub\"];\r",
									"let admin_id_list = [];\r",
									"\r",
									"for(let idx in admin_list){\r",
									"    admin_id_list.push(admin_list[idx][\"sub\"]);\r",
									"}\r",
									"\r",
									"pm.test(\"User 1 Sub/ID not in Admins list req sender\",function(){\r",
									"    pm.expect(admin_id_list).to.not.include(pm.environment.get(\"user_id1\"));\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/admin",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"admin"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST Make User 1 Admin again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"201 status code\", function () {\r",
									"    //Check for 201 status code\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var user_content = pm.response.json();\r",
									"var user_id = user_content[\"sub\"];\r",
									"var user_admin_status = user_content[\"admin\"];\r",
									"\r",
									"pm.test(\"User ID matches req sender\",function(){\r",
									"    pm.expect(user_id).to.be.eql(pm.environment.get(\"user_id1\"));\r",
									"\r",
									"})\r",
									"pm.test(\"User admin status is True\",function(){\r",
									"    pm.expect(user_admin_status).to.be.true;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{app_url}}/admin",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"admin"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST [User 1 Already Admin ] Make User 1 Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"400 status code\", function () {\r",
									"    //Check for 400 status code\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{app_url}}/admin",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"admin"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE User 2 Admin Access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 status code\", function () {\r",
									"    //Check for 204 status code\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt2}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/admin",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"admin"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET User who is Admin Again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 status code\", function () {\r",
									"    //Check for 200 status code\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var user_content = pm.response.json();\r",
									"var admin_list = user_content[\"admins\"];\r",
									"var user_id = user_content[\"sub\"];\r",
									"let admin_id_list = [];\r",
									"\r",
									"for(let idx in admin_list){\r",
									"    admin_id_list.push(admin_list[idx][\"sub\"]);\r",
									"}\r",
									"\r",
									"pm.test(\"User 1 Sub/ID not in Admins list req sender\",function(){\r",
									"    pm.expect(admin_id_list).to.not.include(pm.environment.get(\"user_id2\"));\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/admin",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"admin"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE [Valid JWT - Not Admin User 2] Delete User 2 from Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"403 status code\", function () {\r",
									"    //Check for 403 status code\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt2}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/admin",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"admin"
							]
						}
					},
					"response": []
				},
				{
					"name": "---- [USERS] ---- GET All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 status code\", function () {\r",
									"    //Check for 200 status code\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var user_content = pm.response.json();\r",
									"var user_list = user_content[\"users\"];\r",
									"let user_id_list = [];\r",
									"\r",
									"for(let idx in user_list){\r",
									"    user_id_list.push(user_list[idx][\"sub\"]);\r",
									"}\r",
									"\r",
									"let user_sub_list = [];\r",
									"user_sub_list.push(pm.environment.get(\"user_id1\"));\r",
									"user_sub_list.push(pm.environment.get(\"user_id2\"));\r",
									"\r",
									"pm.test(\"User 1 and 2 ID's in response body\",function(){\r",
									"    pm.expect(user_id_list).to.have.members(user_sub_list);\r",
									"\r",
									"})\r",
									"\r",
									"pm.test(\"User count is 2\",function(){\r",
									"    pm.expect(user_content[\"users\"].length).to.eq(2);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/users",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET [text/csv Accept Header] All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"406 status code\", function () {\r",
									"    //Check for 406 status code\r",
									"    pm.response.to.have.status(406);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{app_url}}/users",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST [Not Allowed] All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"405 status code\", function () {\r",
									"    //Check for 405 status code\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{app_url}}/users",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH [Not Allowed] All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"405 status code\", function () {\r",
									"    //Check for 405 status code\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{app_url}}/users",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE [Not Allowed] All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"405 status code\", function () {\r",
									"    //Check for 405 status code\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{app_url}}/users",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT [Not Allowed] All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"405 status code\", function () {\r",
									"    //Check for 405 status code\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{app_url}}/team_members",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"team_members"
							]
						}
					},
					"response": []
				},
				{
					"name": "add user Wrong URL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"404 status code\", function () {",
									"    //Check for 404 status code",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true,
							"accept": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Sea Witch\",\n    \"type\": \"Catamaran\",\n    \"length\": 28\n}\n"
						},
						"url": {
							"raw": "{{app_url}}/wrongURL",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"wrongURL"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Projects",
			"item": [
				{
					"name": "---- [PROJECTS] ---- PUT [Not Allowed] Projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"405 status code\", function () {\r",
									"    //Check for 405 status code\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{app_url}}/projects",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH [Not Allowed] Projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"405 status code\", function () {\r",
									"    //Check for 405 status code\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{app_url}}/projects",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE [Not Allowed] Projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"405 status code\", function () {\r",
									"    //Check for 405 status code\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/projects",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST project Wrong content_type  - User 1 id is test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"415 status code\", function () {\r",
									"    //Check for 415 status code\r",
									"    pm.response.to.have.status(415);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/plain",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{app_url}}/projects",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST project Wrong Accept Header  - User 1 id is test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"406 status code\", function () {\r",
									"    //Check for 406 status code\r",
									"    pm.response.to.have.status(406);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "text/html",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Build a Racing King Boat\",\r\n    \"budget\": 10900500,\r\n    \"description\": \"We are building a next gen racing boat\",\r\n    \"start_date\": \"2020-03-05\",\r\n    \"end_date\": \"2022-04-07\"\r\n    \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/projects",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST project- Invalid JWT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"401 status code\", function () {\r",
									"    //Check for 401 status code\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{incorrect_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Build a Racing King Boat\",\r\n    \"budget\": 10900500,\r\n    \"description\": \"We are building a next gen racing boat\",\r\n    \"start_date\": \"2020-03-05\",\r\n    \"end_date\": \"2022-04-07\"\r\n    \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/projects",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST project- NO JWT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"401 status code\", function () {\r",
									"    //Check for 401 status code\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Build a Racing King Boat\",\r\n    \"budget\": 10900500,\r\n    \"description\": \"We are building a next gen racing boat\",\r\n    \"start_date\": \"2020-03-05\",\r\n    \"end_date\": \"2022-04-07\"\r\n    \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/projects",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST project- Invalid Request Body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"400 status code\", function () {\r",
									"    //Check for 400 status code\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/projects",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST project- User 1 - JWT1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"201 status code\", function () {\r",
									"    //Check for 201 status code\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"user1_project1_id\",pm.response.json()[\"id\"]);\r",
									"pm.environment.set(\"user1_project1_name\",pm.response.json()[\"name\"]);\r",
									"\r",
									"\r",
									"let project_owner_id = pm.environment.get(\"user_id1\");\r",
									"console.log(\"project_owner_id: \", project_owner_id);\r",
									"\r",
									"pm.test(\"content is valid\", function () {\r",
									"    let project = pm.response.json();\r",
									"    pm.expect(project[\"name\"]).to.eq(pm.collectionVariables.get(\"name\"));\r",
									"    pm.expect(project[\"project_owner\"]).to.eq(project_owner_id);\r",
									"    pm.expect(project[\"budget\"]).to.eq(pm.collectionVariables.get(\"budget\"));\r",
									"    pm.expect(project[\"description\"]).to.eq(pm.collectionVariables.get(\"description\"));\r",
									"    pm.expect(project[\"start_date\"]).to.eq(pm.collectionVariables.get(\"start_date\"));\r",
									"    pm.expect(project[\"end_date\"]).to.eq(pm.collectionVariables.get(\"end_date\"));\r",
									"    \r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.clear();\r",
									"\r",
									"var name = 'Build a Racing King Boat';\r",
									"var budget = 10900500;\r",
									"var description = 'We are building a next gen racing boat';\r",
									"var start_date = '2020-03-05';\r",
									"var end_date = '2022-04-07';\r",
									"\r",
									"\r",
									"var req_body_test = JSON.stringify({\r",
									"    name: name,\r",
									"    budget: budget,\r",
									"    description: description,\r",
									"    start_date: start_date,\r",
									"    end_date: end_date\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"name\", name);\r",
									"pm.collectionVariables.set(\"budget\", budget);\r",
									"pm.collectionVariables.set(\"description\", description);\r",
									"pm.collectionVariables.set(\"start_date\", start_date);\r",
									"pm.collectionVariables.set(\"end_date\", end_date);\r",
									"\r",
									"pm.environment.set(\"req_body_test\", req_body_test);\r",
									"console.log(req_body_test);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{req_body_test}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/projects",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST project 2- User 1 - JWT1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"201 status code\", function () {\r",
									"    //Check for 201 status code\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"user1_project2_id\",pm.response.json()[\"id\"]);\r",
									"pm.environment.set(\"user1_project2_name\",pm.response.json()[\"name\"]);\r",
									"\r",
									"let project_owner_id = pm.environment.get(\"user_id1\");\r",
									"console.log(\"project_owner_id: \", project_owner_id);\r",
									"\r",
									"pm.test(\"content is valid\", function () {\r",
									"    let project = pm.response.json();\r",
									"    pm.expect(project[\"name\"]).to.eq(pm.collectionVariables.get(\"name\"));\r",
									"    pm.expect(project[\"project_owner\"]).to.eq(project_owner_id);\r",
									"    pm.expect(project[\"budget\"]).to.eq(pm.collectionVariables.get(\"budget\"));\r",
									"    pm.expect(project[\"description\"]).to.eq(pm.collectionVariables.get(\"description\"));\r",
									"    pm.expect(project[\"start_date\"]).to.eq(pm.collectionVariables.get(\"start_date\"));\r",
									"    pm.expect(project[\"end_date\"]).to.eq(pm.collectionVariables.get(\"end_date\"));\r",
									"    \r",
									"\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.clear();\r",
									"\r",
									"var name = \"Building Renovation\";\r",
									"var budget = 100;\r",
									"var description = \"Rebuild a building\" ;\r",
									"var start_date = \"2020-03-07\" ;\r",
									"var end_date = \"2022-04-07\";\r",
									"\r",
									"\r",
									"var req_body_test = JSON.stringify({\r",
									"    name: name,\r",
									"    budget: budget,\r",
									"    description: description,\r",
									"    start_date: start_date,\r",
									"    end_date: end_date\r",
									"    \r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"name\", name);\r",
									"pm.collectionVariables.set(\"budget\", budget);\r",
									"pm.collectionVariables.set(\"description\", description);\r",
									"pm.collectionVariables.set(\"start_date\", start_date);\r",
									"pm.collectionVariables.set(\"end_date\", end_date);\r",
									"\r",
									"pm.environment.set(\"req_body_test\", req_body_test);\r",
									"console.log(req_body_test);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{req_body_test}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/projects",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST project 3 - User 1 - JWT1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"201 status code\", function () {\r",
									"    //Check for 201 status code\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"user1_project3_id\",pm.response.json()[\"id\"]);\r",
									"pm.environment.set(\"user1_project3_name\",pm.response.json()[\"name\"]);\r",
									"\r",
									"\r",
									"let project_owner_id = pm.environment.get(\"user_id1\");\r",
									"console.log(\"project_owner_id: \", project_owner_id);\r",
									"\r",
									"pm.test(\"content is valid\", function () {\r",
									"    let project = pm.response.json();\r",
									"    pm.expect(project[\"name\"]).to.eq(pm.collectionVariables.get(\"name\"));\r",
									"    pm.expect(project[\"project_owner\"]).to.eq(project_owner_id);\r",
									"    pm.expect(project[\"budget\"]).to.eq(pm.collectionVariables.get(\"budget\"));\r",
									"    pm.expect(project[\"description\"]).to.eq(pm.collectionVariables.get(\"description\"));\r",
									"    pm.expect(project[\"start_date\"]).to.eq(pm.collectionVariables.get(\"start_date\"));\r",
									"    pm.expect(project[\"end_date\"]).to.eq(pm.collectionVariables.get(\"end_date\"));\r",
									"    \r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.clear();\r",
									"\r",
									"var name = \"Project Top Model\";\r",
									"var budget = 11111;\r",
									"var description = \"Find the next top model\";\r",
									"var start_date = \"2020-03-05\" ;\r",
									"var end_date = \"2023-05-07\";\r",
									"\r",
									"var req_body_test = JSON.stringify({\r",
									"    name: name,\r",
									"    budget: budget,\r",
									"    description: description,\r",
									"    start_date: start_date,\r",
									"    end_date: end_date\r",
									"    \r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"name\", name);\r",
									"pm.collectionVariables.set(\"budget\", budget);\r",
									"pm.collectionVariables.set(\"description\", description);\r",
									"pm.collectionVariables.set(\"start_date\", start_date);\r",
									"pm.collectionVariables.set(\"end_date\", end_date);\r",
									"\r",
									"pm.environment.set(\"req_body_test\", req_body_test);\r",
									"console.log(req_body_test);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{req_body_test}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/projects",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST project 4 - User 1 - JWT1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"201 status code\", function () {\r",
									"    //Check for 201 status code\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"user1_project4_id\",pm.response.json()[\"id\"]);\r",
									"pm.environment.set(\"user1_project4_name\",pm.response.json()[\"name\"]);\r",
									"\r",
									"\r",
									"let project_owner_id = pm.environment.get(\"user_id1\");\r",
									"console.log(\"project_owner_id: \", project_owner_id);\r",
									"\r",
									"pm.test(\"content is valid\", function () {\r",
									"    let project = pm.response.json();\r",
									"    pm.expect(project[\"name\"]).to.eq(pm.collectionVariables.get(\"name\"));\r",
									"    pm.expect(project[\"project_owner\"]).to.eq(project_owner_id);\r",
									"    pm.expect(project[\"budget\"]).to.eq(pm.collectionVariables.get(\"budget\"));\r",
									"    pm.expect(project[\"description\"]).to.eq(pm.collectionVariables.get(\"description\"));\r",
									"    pm.expect(project[\"start_date\"]).to.eq(pm.collectionVariables.get(\"start_date\"));\r",
									"    pm.expect(project[\"end_date\"]).to.eq(pm.collectionVariables.get(\"end_date\"));\r",
									"    \r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.clear();\r",
									"\r",
									"var name = \"Data Center 2\";\r",
									"var budget = 2999751;\r",
									"var description = \"The 2nd next google cloud\";\r",
									"var start_date = \"2020-07-05\" ;\r",
									"var end_date = \"2022-06-07\";\r",
									"\r",
									"var req_body_test = JSON.stringify({\r",
									"    name: name,\r",
									"    budget: budget,\r",
									"    description: description,\r",
									"    start_date: start_date,\r",
									"    end_date: end_date\r",
									"    \r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"name\", name);\r",
									"pm.collectionVariables.set(\"budget\", budget);\r",
									"pm.collectionVariables.set(\"description\", description);\r",
									"pm.collectionVariables.set(\"start_date\", start_date);\r",
									"pm.collectionVariables.set(\"end_date\", end_date);\r",
									"\r",
									"pm.environment.set(\"req_body_test\", req_body_test);\r",
									"console.log(req_body_test);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{req_body_test}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/projects",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST project 5 - User 1 - JWT1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"201 status code\", function () {\r",
									"    //Check for 201 status code\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"user1_project5_id\",pm.response.json()[\"id\"]);\r",
									"pm.environment.set(\"user1_project5_name\",pm.response.json()[\"name\"]);\r",
									"\r",
									"let project_owner_id = pm.environment.get(\"user_id1\");\r",
									"console.log(\"project_owner_id: \", project_owner_id);\r",
									"\r",
									"pm.test(\"content is valid\", function () {\r",
									"    let project = pm.response.json();\r",
									"    pm.expect(project[\"name\"]).to.eq(pm.collectionVariables.get(\"name\"));\r",
									"    pm.expect(project[\"project_owner\"]).to.eq(project_owner_id);\r",
									"    pm.expect(project[\"budget\"]).to.eq(pm.collectionVariables.get(\"budget\"));\r",
									"    pm.expect(project[\"description\"]).to.eq(pm.collectionVariables.get(\"description\"));\r",
									"    pm.expect(project[\"start_date\"]).to.eq(pm.collectionVariables.get(\"start_date\"));\r",
									"    pm.expect(project[\"end_date\"]).to.eq(pm.collectionVariables.get(\"end_date\"));\r",
									"    \r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.clear();\r",
									"\r",
									"var name = \"Data Center 3\";\r",
									"var budget = 12345;\r",
									"var description = \"The third next google cloud\";\r",
									"var start_date = \"2020-07-05\";\r",
									"var end_date = \"2022-06-07\";\r",
									"\r",
									"var req_body_test = JSON.stringify({\r",
									"    name: name,\r",
									"    budget: budget,\r",
									"    description: description,\r",
									"    start_date: start_date,\r",
									"    end_date: end_date\r",
									"    \r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"name\", name);\r",
									"pm.collectionVariables.set(\"budget\", budget);\r",
									"pm.collectionVariables.set(\"description\", description);\r",
									"pm.collectionVariables.set(\"start_date\", start_date);\r",
									"pm.collectionVariables.set(\"end_date\", end_date);\r",
									"\r",
									"pm.environment.set(\"req_body_test\", req_body_test);\r",
									"console.log(req_body_test);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{req_body_test}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/projects",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST project 6 - User 1 - JWT1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"201 status code\", function () {\r",
									"    //Check for 201 status code\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"user1_project6_id\",pm.response.json()[\"id\"]);\r",
									"pm.environment.set(\"user1_project6_name\",pm.response.json()[\"name\"]);\r",
									"\r",
									"let project_owner_id = pm.environment.get(\"user_id1\");\r",
									"console.log(\"project_owner_id: \", project_owner_id);\r",
									"\r",
									"pm.test(\"content is valid\", function () {\r",
									"    let project = pm.response.json();\r",
									"    pm.expect(project[\"name\"]).to.eq(pm.collectionVariables.get(\"name\"));\r",
									"    pm.expect(project[\"project_owner\"]).to.eq(project_owner_id);\r",
									"    pm.expect(project[\"budget\"]).to.eq(pm.collectionVariables.get(\"budget\"));\r",
									"    pm.expect(project[\"description\"]).to.eq(pm.collectionVariables.get(\"description\"));\r",
									"    pm.expect(project[\"start_date\"]).to.eq(pm.collectionVariables.get(\"start_date\"));\r",
									"    pm.expect(project[\"end_date\"]).to.eq(pm.collectionVariables.get(\"end_date\"));\r",
									"    \r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.clear();\r",
									"\r",
									"var name = \"Data Center 4\";\r",
									"var budget = 99999;\r",
									"var description = \"The fourth google cloud\";\r",
									"var start_date = \"2020-07-05\";\r",
									"var end_date = \"2022-06-07\";\r",
									"\r",
									"var req_body_test = JSON.stringify({\r",
									"    name: name,\r",
									"    budget: budget,\r",
									"    description: description,\r",
									"    start_date: start_date,\r",
									"    end_date: end_date\r",
									"    \r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"name\", name);\r",
									"pm.collectionVariables.set(\"budget\", budget);\r",
									"pm.collectionVariables.set(\"description\", description);\r",
									"pm.collectionVariables.set(\"start_date\", start_date);\r",
									"pm.collectionVariables.set(\"end_date\", end_date);\r",
									"\r",
									"pm.environment.set(\"req_body_test\", req_body_test);\r",
									"console.log(req_body_test);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{req_body_test}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/projects",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST project 7 - User 1 - JWT1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"201 status code\", function () {\r",
									"    //Check for 201 status code\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"user1_project7_id\",pm.response.json()[\"id\"]);\r",
									"pm.environment.set(\"user1_project7_name\",pm.response.json()[\"name\"]);\r",
									"\r",
									"let project_owner_id = pm.environment.get(\"user_id1\");\r",
									"console.log(\"project_owner_id: \", project_owner_id);\r",
									"\r",
									"pm.test(\"content is valid\", function () {\r",
									"    let project = pm.response.json();\r",
									"    pm.expect(project[\"name\"]).to.eq(pm.collectionVariables.get(\"name\"));\r",
									"    pm.expect(project[\"project_owner\"]).to.eq(project_owner_id);\r",
									"    pm.expect(project[\"budget\"]).to.eq(pm.collectionVariables.get(\"budget\"));\r",
									"    pm.expect(project[\"description\"]).to.eq(pm.collectionVariables.get(\"description\"));\r",
									"    pm.expect(project[\"start_date\"]).to.eq(pm.collectionVariables.get(\"start_date\"));\r",
									"    pm.expect(project[\"end_date\"]).to.eq(pm.collectionVariables.get(\"end_date\"));\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.clear();\r",
									"\r",
									"var name = \"User1 Project7\";\r",
									"var budget = 777;\r",
									"var description = \"The best project\";\r",
									"var start_date = \"2020-07-05\";\r",
									"var end_date = \"2022-06-07\";\r",
									"\r",
									"var req_body_test = JSON.stringify({\r",
									"    name: name,\r",
									"    budget: budget,\r",
									"    description: description,\r",
									"    start_date: start_date,\r",
									"    end_date: end_date\r",
									"    \r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"name\", name);\r",
									"pm.collectionVariables.set(\"budget\", budget);\r",
									"pm.collectionVariables.set(\"description\", description);\r",
									"pm.collectionVariables.set(\"start_date\", start_date);\r",
									"pm.collectionVariables.set(\"end_date\", end_date);\r",
									"\r",
									"pm.environment.set(\"req_body_test\", req_body_test);\r",
									"console.log(req_body_test);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{req_body_test}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/projects",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST project 1 - User 2 - JWT2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"201 status code\", function () {\r",
									"    //Check for 201 status code\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"user2_project1_id\",pm.response.json()[\"id\"]);\r",
									"pm.environment.set(\"user2_project1_name\",pm.response.json()[\"name\"]);\r",
									"\r",
									"let project_owner_id = pm.environment.get(\"user_id2\");\r",
									"console.log(\"project_owner_id: \", project_owner_id);\r",
									"\r",
									"pm.test(\"content is valid\", function () {\r",
									"    let project = pm.response.json();\r",
									"    pm.expect(project[\"name\"]).to.eq(pm.collectionVariables.get(\"name\"));\r",
									"    pm.expect(project[\"project_owner\"]).to.eq(project_owner_id);\r",
									"    pm.expect(project[\"budget\"]).to.eq(pm.collectionVariables.get(\"budget\"));\r",
									"    pm.expect(project[\"description\"]).to.eq(pm.collectionVariables.get(\"description\"));\r",
									"    pm.expect(project[\"start_date\"]).to.eq(pm.collectionVariables.get(\"start_date\"));\r",
									"    pm.expect(project[\"end_date\"]).to.eq(pm.collectionVariables.get(\"end_date\"));\r",
									"    \r",
									"\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.clear();\r",
									"\r",
									"var name = \"User2 Project1\";\r",
									"var budget = 77877;\r",
									"var description =  \"This is user2 project 1\";\r",
									"var start_date = \"2020-07-05\";\r",
									"var end_date = \"2022-06-07\";\r",
									"\r",
									"var req_body_test = JSON.stringify({\r",
									"    name: name,\r",
									"    budget: budget,\r",
									"    description: description,\r",
									"    start_date: start_date,\r",
									"    end_date: end_date\r",
									"    \r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"name\", name);\r",
									"pm.collectionVariables.set(\"budget\", budget);\r",
									"pm.collectionVariables.set(\"description\", description);\r",
									"pm.collectionVariables.set(\"start_date\", start_date);\r",
									"pm.collectionVariables.set(\"end_date\", end_date);\r",
									"\r",
									"pm.environment.set(\"req_body_test\", req_body_test);\r",
									"console.log(req_body_test);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt2}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{req_body_test}}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/projects",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Projects (Wrong Accept Type) with Token  - User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"406 status code\", function () {\r",
									"    //Check for 406 status code\r",
									"    pm.response.to.have.status(406);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/html",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{app_url}}/projects",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Projects - Invalid JWT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"401 status code\", function () {\r",
									"    //Check for 401 status code\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{incorrect_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/html",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/projects",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Projects - No JWT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"401 status code\", function () {\r",
									"    //Check for 401 status code\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/html",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/projects",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT on /projects - Invalid Method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"405 status code\", function () {\r",
									"    //Check for 405 status code\r",
									"    pm.response.to.have.status(405);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "text/html",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/projects",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Projects with Token  - User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 status code\", function () {\r",
									"    //Check for 200 status code\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"console.log(pm.response.json()[\"projects\"]);\r",
									"\r",
									"pm.test(\"5 Entities exist\", function(){\r",
									"   pm.expect(pm.response.json()[\"projects\"].length).to.be.at.least(5);\r",
									"});\r",
									"\r",
									"var url = pm.environment.get(\"app_url\");\r",
									"pm.test(\"Next url exists\", function(){\r",
									"    var next_url = url + \"/projects?limit=0&offset=5\";\r",
									"    pm.expect(pm.response.json()[\"next\"]).to.eq(next_url);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/projects",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET projects limit=5 offset=5 with Token - User1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 status code\", function () {\r",
									"    //Check for 200 status code\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"console.log(pm.response.json()[\"projects\"]);\r",
									"\r",
									"pm.test(\"2 Entities exist\", function(){\r",
									"   pm.expect(pm.response.json()[\"projects\"].length).to.be.eq(2);\r",
									"});\r",
									"pm.test(\"Next url does not exist\", function(){\r",
									"\r",
									"    pm.expect(pm.response.json()[\"next\"]).to.not.exist;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/projects?limit=5&offset=5",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects"
							],
							"query": [
								{
									"key": "limit",
									"value": "5"
								},
								{
									"key": "offset",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET projects w Token - User2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 status code\", function () {\r",
									"    //Check for 200 status code\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"console.log(pm.response.json()[\"projects\"]);\r",
									"\r",
									"pm.test(\"1 Entities exist\", function(){\r",
									"   pm.expect(pm.response.json()[\"projects\"].length).to.be.eq(1);\r",
									"});\r",
									"pm.test(\"Next url does not exist\", function(){\r",
									"\r",
									"    pm.expect(pm.response.json()[\"next\"]).to.not.exist;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt2}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/projects",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Project 1 - wrong Project ID - User 1 - JWT1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"404 status code\", function () {\r",
									"    //Check for 404 status code\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/projects/{{user1_project1_id_incorrect}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects",
								"{{user1_project1_id_incorrect}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Project 2 - User 1 - JWT1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 status code\", function () {\r",
									"    //Check for 200 status code\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var value = pm.response.json();\r",
									"console.log(value);\r",
									"\r",
									"\r",
									"pm.test(\"content is valid\", function () {\r",
									"        pm.expect(value[\"budget\"]).to.eq(100);\r",
									"        pm.expect(value[\"client_id\"]).to.be.undefined;\r",
									"        pm.expect(value[\"description\"]).to.eq(\"Rebuild a building\");\r",
									"        pm.expect(value[\"end_date\"]).to.eq(\"2022-04-07\");\r",
									"        pm.expect(value[\"start_date\"]).to.eq(\"2020-03-07\");\r",
									"        pm.expect(value[\"id\"]).to.eq(pm.environment.get(\"user1_project2_id\"));\r",
									"        pm.expect(value[\"name\"]).to.eq(\"Building Renovation\");\r",
									"        pm.expect(value[\"project_owner\"]).to.eq(pm.environment.get(\"user_id1\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/projects/{{user1_project2_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects",
								"{{user1_project2_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET User 2's Project 1 - JWT2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 status code\", function () {\r",
									"    //Check for 200 status code\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"let project = pm.response.json();\r",
									"\r",
									"\r",
									"let project_owner_id = pm.environment.get(\"user_id2\");\r",
									"console.log(\"project_owner_id: \", project_owner_id);\r",
									"\r",
									"pm.test(\"Owner is correct \", function () {\r",
									"    //Check for 200 status code\r",
									"    pm.expect(project[\"project_owner\"]).to.eql(project_owner_id)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt2}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/projects/{{user2_project1_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects",
								"{{user2_project1_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET User 1's Project 1 with  User 2's JWT2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"403 status code\", function () {\r",
									"    //Check for 403 status code\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"var msg = \"Invalid project_owner for this project_id\";\r",
									"pm.test(\"Error message matches\", function(){\r",
									"   pm.expect(pm.response.json()[\"Error\"]).to.eq(msg);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt2}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/projects/{{user1_project1_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects",
								"{{user1_project1_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Project 1 (Wrong Accept Type) - User 1 - JWT1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"406 status code\", function () {\r",
									"    //Check for 406 status code\r",
									"    pm.response.to.have.status(406);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/html",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/projects/{{user1_project1_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects",
								"{{user1_project1_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST on /projects/:project_id - Invalid Method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"405 status code\", function () {\r",
									"    //Check for 405 status code\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt2}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/projects/{{user1_project1_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects",
								"{{user1_project1_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Team Members",
			"item": [
				{
					"name": "PUT ----[TEAM MEMBERS] ---- [Not Allowed] Team_Members",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"405 status code\", function () {\r",
									"    //Check for 405 status code\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{app_url}}/team_members",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"team_members"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH [Not Allowed] Team_Members",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"405 status code\", function () {\r",
									"    //Check for 405 status code\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{app_url}}/team_members",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"team_members"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE [Not Allowed] Team_Members",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"405 status code\", function () {\r",
									"    //Check for 405 status code\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/team_members",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"team_members"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST team member 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"201 status code\", function () {\r",
									"    //Check for 201 status code\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"team_member_1\",pm.response.json()[\"id\"]);\r",
									"pm.environment.set(\"team_member_incorrect_id\",1);\r",
									"\r",
									"var url = pm.environment.get(\"app_url\");\r",
									"pm.test(\"content is valid\", function () {\r",
									"    let team_member = pm.response.json();\r",
									"    pm.expect(team_member[\"name\"]).to.eq(\"Bart Simpson\");\r",
									"    pm.expect(team_member[\"id\"]).to.exist;\r",
									"    pm.expect(team_member[\"specialty\"]).to.eq(\"Chaos\");\r",
									"    pm.expect(team_member[\"join_date\"]).to.eq(\"2020-07-05\");\r",
									"    var self_url = url + \"/team_members/\" +  team_member[\"id\"];\r",
									"    pm.expect(team_member[\"self\"]).to.eq(self_url);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Bart Simpson\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"specialty\": \"Chaos\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/team_members",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"team_members"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST team member 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"201 status code\", function () {\r",
									"    //Check for 201 status code\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"team_member_2\",pm.response.json()[\"id\"]);\r",
									"var url = pm.environment.get(\"app_url\");\r",
									"pm.test(\"content is valid\", function () {\r",
									"    let team_member = pm.response.json();\r",
									"    pm.expect(team_member[\"name\"]).to.eq(\"Lisa Simpson\");\r",
									"    pm.expect(team_member[\"id\"]).to.exist;\r",
									"    pm.expect(team_member[\"specialty\"]).to.eq(\"Science\");\r",
									"    pm.expect(team_member[\"join_date\"]).to.eq(\"2020-07-05\");\r",
									"    var self_url = url + \"/team_members/\" +  team_member[\"id\"];\r",
									"    pm.expect(team_member[\"self\"]).to.eq(self_url);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Lisa Simpson\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"specialty\": \"Science\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/team_members",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"team_members"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST team member 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"201 status code\", function () {\r",
									"    //Check for 201 status code\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"team_member_3\",pm.response.json()[\"id\"]);\r",
									"var url = pm.environment.get(\"app_url\");\r",
									"pm.test(\"content is valid\", function () {\r",
									"    let team_member = pm.response.json();\r",
									"    pm.expect(team_member[\"name\"]).to.eq(\"Garfield\");\r",
									"    pm.expect(team_member[\"id\"]).to.exist;\r",
									"    pm.expect(team_member[\"specialty\"]).to.eq(\"Lasagna\");\r",
									"    pm.expect(team_member[\"join_date\"]).to.eq(\"2020-07-05\");\r",
									"    var self_url = url + \"/team_members/\" +  team_member[\"id\"];\r",
									"    pm.expect(team_member[\"self\"]).to.eq(self_url);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Garfield\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"specialty\": \"Lasagna\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/team_members",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"team_members"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST team member 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"201 status code\", function () {\r",
									"    //Check for 201 status code\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"team_member_4\",pm.response.json()[\"id\"]);\r",
									"var url = pm.environment.get(\"app_url\");\r",
									"pm.test(\"content is valid\", function () {\r",
									"    let team_member = pm.response.json();\r",
									"    pm.expect(team_member[\"name\"]).to.eq(\"Snoopy\");\r",
									"    pm.expect(team_member[\"id\"]).to.exist;\r",
									"    pm.expect(team_member[\"specialty\"]).to.eq(\"Snooping around\");\r",
									"    pm.expect(team_member[\"join_date\"]).to.eq(\"2020-07-05\");\r",
									"    var self_url = url + \"/team_members/\" +  team_member[\"id\"];\r",
									"    pm.expect(team_member[\"self\"]).to.eq(self_url);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Snoopy\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"specialty\": \"Snooping around\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/team_members",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"team_members"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST team member 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"201 status code\", function () {\r",
									"    //Check for 201 status code\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"team_member_5\",pm.response.json()[\"id\"]);\r",
									"var url = pm.environment.get(\"app_url\");\r",
									"\r",
									"pm.test(\"content is valid\", function () {\r",
									"    let team_member = pm.response.json();\r",
									"    pm.expect(team_member[\"name\"]).to.eq(\"Batman\");\r",
									"    pm.expect(team_member[\"id\"]).to.exist;\r",
									"    pm.expect(team_member[\"specialty\"]).to.eq(\"Fighting Crime\");\r",
									"    pm.expect(team_member[\"join_date\"]).to.eq(\"2020-07-05\");\r",
									"    var self_url = url + \"/team_members/\" +  team_member[\"id\"];\r",
									"    pm.expect(team_member[\"self\"]).to.eq(self_url);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Batman\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"specialty\": \"Fighting Crime\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/team_members",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"team_members"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST team member 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"201 status code\", function () {\r",
									"    //Check for 201 status code\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"team_member_6\",pm.response.json()[\"id\"]);\r",
									"pm.environment.set(\"team_member_6_incorrect\",1);\r",
									"\r",
									"\r",
									"var url = pm.environment.get(\"app_url\");\r",
									"pm.test(\"content is valid\", function () {\r",
									"    let team_member = pm.response.json();\r",
									"    pm.expect(team_member[\"name\"]).to.eq(\"Stewie Griffin\");\r",
									"    pm.expect(team_member[\"id\"]).to.exist;\r",
									"    pm.expect(team_member[\"specialty\"]).to.eq(\"Master Intelligence\");\r",
									"    pm.expect(team_member[\"join_date\"]).to.eq(\"2020-07-05\");\r",
									"    var self_url = url + \"/team_members/\" +  team_member[\"id\"];\r",
									"    pm.expect(team_member[\"self\"]).to.eq(self_url);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Stewie Griffin\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"specialty\": \"Master Intelligence\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/team_members",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"team_members"
							]
						}
					},
					"response": []
				},
				{
					"name": "EDIT [PATCH] - Team Member 1 - No Request Body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"PATCH Request with no request body - Response 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "content",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/team_members/{{team_member_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"team_members",
								"{{team_member_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST team member 7",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"201 status code\", function () {\r",
									"    //Check for 201 status code\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"team_member_7\",pm.response.json()[\"id\"]);\r",
									"pm.environment.set(\"team_member_7_incorrect\",1);\r",
									"\r",
									"\r",
									"var url = pm.environment.get(\"app_url\");\r",
									"pm.test(\"content is valid\", function () {\r",
									"    let team_member = pm.response.json();\r",
									"    pm.expect(team_member[\"name\"]).to.eq(\"Stewie Griffin Clone\");\r",
									"    pm.expect(team_member[\"id\"]).to.exist;\r",
									"    pm.expect(team_member[\"specialty\"]).to.eq(\"Clone Master\");\r",
									"    pm.expect(team_member[\"join_date\"]).to.eq(\"2022-07-10\");\r",
									"    var self_url = url + \"/team_members/\" +  team_member[\"id\"];\r",
									"    pm.expect(team_member[\"self\"]).to.eq(self_url);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Stewie Griffin Clone\",\r\n    \"join_date\": \"2022-07-10\",\r\n    \"specialty\": \"Clone Master\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/team_members",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"team_members"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Team_Members - No Request Body 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST Request with no request body - Response 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/team_members",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"team_members"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - (Wrong Content Type) - Team_Members",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST Request with no request body - Response 415\", function () {\r",
									"    pm.response.to.have.status(415);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/csv",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{app_url}}/team_members",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"team_members"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - (Wrong Accept Type) - Team_Members",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Incorrect Accept-Type - Response 406\", function () {\r",
									"    pm.response.to.have.status(406);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/csv",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Accept",
								"value": "text/csv",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Bart Simpson\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"specialty\": \"Chaos\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/team_members",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"team_members"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET (Wrong Accept Type) All team_members",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Incorrect Accept-Type - Response 406\", function () {\r",
									"    pm.response.to.have.status(406);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/team_members",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"team_members"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET All team_members",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 status code\", function () {\r",
									"    //Check for 200 status code\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"console.log(pm.response.json()[\"team_members\"]);\r",
									"\r",
									"pm.test(\"5 Entities exist\", function(){\r",
									"   pm.expect(pm.response.json()[\"team_members\"].length).to.be.at.least(5);\r",
									"});\r",
									"\r",
									"var url = pm.environment.get(\"app_url\");\r",
									"pm.test(\"Next url exists\", function(){\r",
									"    var next_url = url + \"/team_members?limit=0&offset=5\";\r",
									"    pm.expect(pm.response.json()[\"next\"]).to.eq(next_url);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/team_members",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"team_members"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET team_members limit=5 offset=5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 status code\", function () {\r",
									"    //Check for 200 status code\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/team_members?limit=5&offset=5",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"team_members"
							],
							"query": [
								{
									"key": "limit",
									"value": "5"
								},
								{
									"key": "offset",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET * team member 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 status code\", function () {\r",
									"    //Check for 200 status code\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"content = pm.response.json();\r",
									"const client_attr_list = [\"id\", \"specialty\", \"join_date\", \"name\", \"projects\",\"self\"];\r",
									"\r",
									"pm.test(\"6 team members entity attributes exist\", function(){\r",
									"    var attribute_list = [];\r",
									"    for(let key in content){\r",
									"        attribute_list.push(key)\r",
									"        console.log(\"key: \", key);\r",
									"    }\r",
									"   pm.expect(attribute_list).to.have.all.members(client_attr_list);\r",
									"});\r",
									"\r",
									"var url = pm.environment.get(\"app_url\");\r",
									"pm.test(\"Next url exists\", function(){\r",
									"    var self_url = url + \"/team_members/\" + pm.environment.get(\"team_member_1\");\r",
									"    pm.expect(content[\"self\"]).to.eq(self_url);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/team_members/{{team_member_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"team_members",
								"{{team_member_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST [Not Allowed] Team_Member ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"405 status code\", function () {\r",
									"    //Check for 405 status code\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{app_url}}/team_members/{{team_member_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"team_members",
								"{{team_member_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "EDIT [PUT] - Team Member 1 - Missing Attribute",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"PUT Request with no request body - Response 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Bart Simpson\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"specialty\": \"Chaos\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/team_members/{{team_member_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"team_members",
								"{{team_member_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Incorrect Id for team member 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"404 status code\", function () {\r",
									"    //Check for 404 status code\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/team_members/{{team_member_incorrect_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"team_members",
								"{{team_member_incorrect_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - (Wrong Accept Type) - Team_Members/team_member_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Incorrect Accept-Type - Response 406\", function () {\r",
									"    pm.response.to.have.status(406);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{app_url}}/team_members/{{team_member_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"team_members",
								"{{team_member_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE  team_member 1 - without Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"401 status code\", function () {\r",
									"    //Check for 401 status code\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"The Simpsons Company\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"industry\": \"Financials\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/team_members/{{team_member_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"team_members",
								"{{team_member_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE  team_member 1 - with User 2 JWT2, No Admin Access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"403 status code\", function () {\r",
									"    //Check for 403 status code\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt2}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/team_members/{{team_member_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"team_members",
								"{{team_member_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE  team_member 1 - User 1 Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 status code\", function () {\r",
									"    //Check for 204 status code\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"The Simpsons Company\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"industry\": \"Financials\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/team_members/{{team_member_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"team_members",
								"{{team_member_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "RE POST team member 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"201 status code\", function () {\r",
									"    //Check for 201 status code\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"team_member_1\",pm.response.json()[\"id\"]);\r",
									"pm.environment.set(\"team_member_incorrect_id\",1);\r",
									"\r",
									"var url = pm.environment.get(\"app_url\");\r",
									"pm.test(\"content is valid\", function () {\r",
									"    let team_member = pm.response.json();\r",
									"    pm.expect(team_member[\"name\"]).to.eq(\"Bart Simpson\");\r",
									"    pm.expect(team_member[\"id\"]).to.exist;\r",
									"    pm.expect(team_member[\"specialty\"]).to.eq(\"Chaos\");\r",
									"    pm.expect(team_member[\"join_date\"]).to.eq(\"2020-07-05\");\r",
									"    var self_url = url + \"/team_members/\" +  team_member[\"id\"];\r",
									"    pm.expect(team_member[\"self\"]).to.eq(self_url);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Bart Simpson\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"specialty\": \"Chaos\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/team_members",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"team_members"
							]
						}
					},
					"response": []
				},
				{
					"name": "EDIT [PUT] - Team Member 1 - No Request Body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"PUT Request with no request body - Response 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Bart Simpson\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"specialty\": \"Chaos\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/team_members/{{team_member_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"team_members",
								"{{team_member_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT (Invalid Request Body) - team member 1 - with User 1 - JWT1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"400 status code\", function () {\r",
									"    //Check for 400 status code\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Bart Simpson\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"specialty\": \"Chaos\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/team_members/{{team_member_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"team_members",
								"{{team_member_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH (Invalid Request Body) - team member 1 - with User 1 - JWT1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"400 status code\", function () {\r",
									"    //Check for 400 status code\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"B\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/team_members/{{team_member_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"team_members",
								"{{team_member_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT (No JWT) - team member 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"401 status code\", function () {\r",
									"    //Check for 401 status code\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.clear();\r",
									"\r",
									"var name = \"Bart Simpson\";\r",
									"var specialty = \"Chaos\";\r",
									"var join_date = \"2020-07-05\" ;\r",
									"var projects = null;\r",
									"\r",
									"var req_body_test = JSON.stringify({\r",
									"    name: name,\r",
									"    projects: projects,\r",
									"    specialty: specialty,\r",
									"    join_date: join_date\r",
									"});\r",
									"\r",
									"// pm.collectionVariables.set(\"name\", name);\r",
									"// pm.collectionVariables.set(\"projects\", projects);\r",
									"// pm.collectionVariables.set(\"specialty\", specialty);\r",
									"// pm.collectionVariables.set(\"join_date\", join_date);\r",
									"\r",
									"pm.environment.set(\"req_body_test\", req_body_test);\r",
									"console.log(req_body_test);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Bart Simpson\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"specialty\": \"Chaos\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/team_members/{{team_member_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"team_members",
								"{{team_member_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH (No JWT) - team member 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"401 status code\", function () {\r",
									"    //Check for 401 status code\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.clear();\r",
									"\r",
									"var name = \"Bart Simpson\";\r",
									"var specialty = \"Chaos\";\r",
									"var join_date = \"2020-07-05\" ;\r",
									"var projects = null;\r",
									"\r",
									"var req_body_test = JSON.stringify({\r",
									"    name: name,\r",
									"    projects: projects,\r",
									"    specialty: specialty,\r",
									"    join_date: join_date,\r",
									"    \r",
									"});\r",
									"\r",
									"// pm.collectionVariables.set(\"name\", name);\r",
									"// pm.collectionVariables.set(\"projects\", projects);\r",
									"// pm.collectionVariables.set(\"specialty\", specialty);\r",
									"// pm.collectionVariables.set(\"join_date\", join_date);\r",
									"\r",
									"pm.environment.set(\"req_body_test\", req_body_test);\r",
									"console.log(req_body_test);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Bart Simpson\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"specialty\": \"Chaos\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/team_members/{{team_member_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"team_members",
								"{{team_member_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE (No JWT) - team member 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"401 status code\", function () {\r",
									"    //Check for 401 status code\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.clear();\r",
									"\r",
									"var name = \"Bart Simpson\";\r",
									"var specialty = \"Chaos\";\r",
									"var join_date = \"2020-07-05\" ;\r",
									"var projects = null;\r",
									"\r",
									"var req_body_test = JSON.stringify({\r",
									"    name: name,\r",
									"    projects: projects,\r",
									"    specialty: specialty,\r",
									"    join_date: join_date,\r",
									"});\r",
									"\r",
									"// pm.collectionVariables.set(\"name\", name);\r",
									"// pm.collectionVariables.set(\"projects\", projects);\r",
									"// pm.collectionVariables.set(\"specialty\", specialty);\r",
									"// pm.collectionVariables.set(\"join_date\", join_date);\r",
									"\r",
									"pm.environment.set(\"req_body_test\", req_body_test);\r",
									"console.log(req_body_test);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Bart Simpson\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"specialty\": \"Chaos\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/team_members/{{team_member_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"team_members",
								"{{team_member_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT (Invalid JWT - Not Admin) - team member 1 - with User 2- JWT2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"403 status code\", function () {\r",
									"    //Check for 403 status code\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt2}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Bart Simpson\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"specialty\": \"Chaos\",\r\n    \"projects\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/team_members/{{team_member_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"team_members",
								"{{team_member_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH (Invalid JWT - Not Admin) - team member 1 - with User 2- JWT2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"403 status code\", function () {\r",
									"    //Check for 403 status code\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt2}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Bart Simpson\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"specialty\": \"Chaos\",\r\n    \"projects\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/team_members/{{team_member_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"team_members",
								"{{team_member_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE (Invalid JWT - Not Admin) - team member 1 - with User 2- JWT2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"403 status code\", function () {\r",
									"    //Check for 403 status code\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt2}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/team_members/{{team_member_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"team_members",
								"{{team_member_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT (Wrong Team Member ID) - team member 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"404 status code\", function () {\r",
									"    //Check for 404 status code\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.clear();\r",
									"\r",
									"var name = \"Bart Simpson\";\r",
									"var specialty = \"Chaos\";\r",
									"var join_date = \"2020-07-05\" ;\r",
									"var projects = null;\r",
									"\r",
									"var req_body_test = JSON.stringify({\r",
									"    name: name,\r",
									"    projects: projects,\r",
									"    specialty: specialty,\r",
									"    join_date: join_date,\r",
									"});\r",
									"\r",
									"// pm.collectionVariables.set(\"name\", name);\r",
									"// pm.collectionVariables.set(\"projects\", projects);\r",
									"// pm.collectionVariables.set(\"specialty\", specialty);\r",
									"// pm.collectionVariables.set(\"join_date\", join_date);\r",
									"\r",
									"pm.environment.set(\"req_body_test\", req_body_test);\r",
									"console.log(req_body_test);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Bart Simpson\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"specialty\": \"Chaos\",\r\n    \"projects\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/team_members/{{team_member_incorrect_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"team_members",
								"{{team_member_incorrect_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH (Wrong Team Member ID) - team member 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"404 status code\", function () {\r",
									"    //Check for 404 status code\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.clear();\r",
									"\r",
									"var name = \"Bart Simpson\";\r",
									"var specialty = \"Chaos\";\r",
									"var join_date = \"2020-07-05\" ;\r",
									"var projects = null;\r",
									"\r",
									"var req_body_test = JSON.stringify({\r",
									"    name: name,\r",
									"    projects: projects,\r",
									"    specialty: specialty,\r",
									"    join_date: join_date,\r",
									"});\r",
									"\r",
									"// pm.collectionVariables.set(\"name\", name);\r",
									"// pm.collectionVariables.set(\"projects\", projects);\r",
									"// pm.collectionVariables.set(\"specialty\", specialty);\r",
									"// pm.collectionVariables.set(\"join_date\", join_date);\r",
									"\r",
									"pm.environment.set(\"req_body_test\", req_body_test);\r",
									"console.log(req_body_test);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Bart Simpson\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"specialty\": \"Chaos\",\r\n    \"projects\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/team_members/{{team_member_incorrect_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"team_members",
								"{{team_member_incorrect_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE (Wrong Team Member ID) - team member 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"404 status code\", function () {\r",
									"    //Check for 404 status code\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.clear();\r",
									"\r",
									"var name = \"Bart Simpson\";\r",
									"var specialty = \"Chaos\";\r",
									"var join_date = \"2020-07-05\" ;\r",
									"var projects = null;\r",
									"\r",
									"var req_body_test = JSON.stringify({\r",
									"    name: name,\r",
									"    projects: projects,\r",
									"    specialty: specialty,\r",
									"    join_date: join_date,\r",
									"});\r",
									"\r",
									"// pm.collectionVariables.set(\"name\", name);\r",
									"// pm.collectionVariables.set(\"projects\", projects);\r",
									"// pm.collectionVariables.set(\"specialty\", specialty);\r",
									"// pm.collectionVariables.set(\"join_date\", join_date);\r",
									"\r",
									"pm.environment.set(\"req_body_test\", req_body_test);\r",
									"console.log(req_body_test);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/team_members/{{team_member_incorrect_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"team_members",
								"{{team_member_incorrect_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT (Wrong Content-Type) - team member 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"415 status code\", function () {\r",
									"    //Check for 415 status code\r",
									"    pm.response.to.have.status(415);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.clear();\r",
									"\r",
									"var name = \"Bart Simpson\";\r",
									"var specialty = \"Chaos\";\r",
									"var join_date = \"2020-07-05\" ;\r",
									"var projects = null;\r",
									"\r",
									"var req_body_test = JSON.stringify({\r",
									"    name: name,\r",
									"    projects: projects,\r",
									"    specialty: specialty,\r",
									"    join_date: join_date,\r",
									"});\r",
									"\r",
									"// pm.collectionVariables.set(\"name\", name);\r",
									"// pm.collectionVariables.set(\"projects\", projects);\r",
									"// pm.collectionVariables.set(\"specialty\", specialty);\r",
									"// pm.collectionVariables.set(\"join_date\", join_date);\r",
									"\r",
									"pm.environment.set(\"req_body_test\", req_body_test);\r",
									"console.log(req_body_test);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/csv",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Bart Simpson\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"specialty\": \"Chaos\",\r\n    \"projects\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/team_members/{{team_member_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"team_members",
								"{{team_member_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT (Wrong Content-Type) - team member 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"415 status code\", function () {\r",
									"    //Check for 415 status code\r",
									"    pm.response.to.have.status(415);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.clear();\r",
									"\r",
									"var name = \"Bart Simpson\";\r",
									"var specialty = \"Chaos\";\r",
									"var join_date = \"2020-07-05\" ;\r",
									"var projects = null;\r",
									"\r",
									"var req_body_test = JSON.stringify({\r",
									"    name: name,\r",
									"    projects: projects,\r",
									"    specialty: specialty,\r",
									"    join_date: join_date,\r",
									"});\r",
									"\r",
									"// pm.collectionVariables.set(\"name\", name);\r",
									"// pm.collectionVariables.set(\"projects\", projects);\r",
									"// pm.collectionVariables.set(\"specialty\", specialty);\r",
									"// pm.collectionVariables.set(\"join_date\", join_date);\r",
									"\r",
									"pm.environment.set(\"req_body_test\", req_body_test);\r",
									"console.log(req_body_test);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/csv",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Bart Simpson\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"specialty\": \"Chaos\",\r\n    \"projects\": null\r\n}"
						},
						"url": {
							"raw": "{{app_url}}/team_members/{{team_member_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"team_members",
								"{{team_member_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT (Wrong Accept header) - team member 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"406 status code\", function () {\r",
									"    //Check for 406 status code\r",
									"    pm.response.to.have.status(406);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/csv",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Accept",
								"value": "text/csv",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Bart Simpson\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"specialty\": \"Chaos\",\r\n    \"projects\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/team_members/{{team_member_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"team_members",
								"{{team_member_1}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Clients",
			"item": [
				{
					"name": "PATCH ---- [ CLIENTS ] ---- [Not Allowed] Clients",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"405 status code\", function () {\r",
									"    //Check for 405 status code\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{app_url}}/clients",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"clients"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST client 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"201 status code\", function () {\r",
									"    //Check for 201 status code\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"client_1\",pm.response.json()[\"id\"]);\r",
									"pm.environment.set(\"client_id_incorrect\",1);\r",
									"\r",
									"var url = pm.environment.get(\"app_url\");\r",
									"pm.test(\"content is valid\", function () {\r",
									"    let client = pm.response.json();\r",
									"    pm.expect(client[\"name\"]).to.eq(\"The Simpsons Company\");\r",
									"    pm.expect(client[\"id\"]).to.exist;\r",
									"    pm.expect(client[\"industry\"]).to.eq(\"Financials\");\r",
									"    pm.expect(client[\"join_date\"]).to.eq(\"2020-07-05\");\r",
									"    var self_url = url + \"/clients/\" +  client[\"id\"];\r",
									"    pm.expect(client[\"self\"]).to.eq(self_url);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"The Simpsons Company\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"industry\": \"Financials\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/clients",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"clients"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST client 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"201 status code\", function () {\r",
									"    //Check for 201 status code\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"client_2\",pm.response.json()[\"id\"]);\r",
									"\r",
									"var url = pm.environment.get(\"app_url\");\r",
									"pm.test(\"content is valid\", function () {\r",
									"    let client = pm.response.json();\r",
									"    pm.expect(client[\"name\"]).to.eq(\"The Avengers Ltd\");\r",
									"    pm.expect(client[\"id\"]).to.exist;\r",
									"    pm.expect(client[\"industry\"]).to.eq(\"Consumer Staples\");\r",
									"    pm.expect(client[\"join_date\"]).to.eq(\"2020-07-05\");\r",
									"    var self_url = url + \"/clients/\" +  client[\"id\"];\r",
									"    pm.expect(client[\"self\"]).to.eq(self_url);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"The Avengers Ltd\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"industry\": \"Consumer Staples\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/clients",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"clients"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST client 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"201 status code\", function () {\r",
									"    //Check for 201 status code\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"client_3\",pm.response.json()[\"id\"]);\r",
									"\r",
									"var url = pm.environment.get(\"app_url\");\r",
									"pm.test(\"content is valid\", function () {\r",
									"    let client = pm.response.json();\r",
									"    pm.expect(client[\"name\"]).to.eq(\"Monopoly Game\");\r",
									"    pm.expect(client[\"id\"]).to.exist;\r",
									"    pm.expect(client[\"industry\"]).to.eq(\"Real Estate\");\r",
									"    pm.expect(client[\"join_date\"]).to.eq(\"2021-07-05\");\r",
									"    var self_url = url + \"/clients/\" +  client[\"id\"];\r",
									"    pm.expect(client[\"self\"]).to.eq(self_url);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Monopoly Game\",\r\n    \"join_date\": \"2021-07-05\",\r\n    \"industry\": \"Real Estate\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/clients",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"clients"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST client 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"201 status code\", function () {\r",
									"    //Check for 201 status code\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"client_4\",pm.response.json()[\"id\"]);\r",
									"\r",
									"var url = pm.environment.get(\"app_url\");\r",
									"pm.test(\"content is valid\", function () {\r",
									"    let client = pm.response.json();\r",
									"    pm.expect(client[\"name\"]).to.eq(\"Razer\");\r",
									"    pm.expect(client[\"id\"]).to.exist;\r",
									"    pm.expect(client[\"industry\"]).to.eq(\"Consumer Discretionary\");\r",
									"    pm.expect(client[\"join_date\"]).to.eq(\"2021-07-05\");\r",
									"    var self_url = url + \"/clients/\" +  client[\"id\"];\r",
									"    pm.expect(client[\"self\"]).to.eq(self_url);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Razer\",\r\n    \"join_date\": \"2021-07-05\",\r\n    \"industry\": \"Consumer Discretionary\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/clients",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"clients"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST client 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"201 status code\", function () {\r",
									"    //Check for 201 status code\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"client_5\",pm.response.json()[\"id\"]);\r",
									"\r",
									"var url = pm.environment.get(\"app_url\");\r",
									"pm.test(\"content is valid\", function () {\r",
									"    let client = pm.response.json();\r",
									"    pm.expect(client[\"name\"]).to.eq(\"Logitech\");\r",
									"    pm.expect(client[\"id\"]).to.exist;\r",
									"    pm.expect(client[\"industry\"]).to.eq(\"Consumer Discretionary\");\r",
									"    pm.expect(client[\"join_date\"]).to.eq(\"2020-06-05\");\r",
									"    var self_url = url + \"/clients/\" +  client[\"id\"];\r",
									"    pm.expect(client[\"self\"]).to.eq(self_url);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Logitech\",\r\n    \"join_date\": \"2020-06-05\",\r\n    \"industry\": \"Consumer Discretionary\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/clients",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"clients"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST client 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"201 status code\", function () {\r",
									"    //Check for 201 status code\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"client_6\",pm.response.json()[\"id\"]);\r",
									"\r",
									"var url = pm.environment.get(\"app_url\");\r",
									"pm.test(\"content is valid\", function () {\r",
									"    let client = pm.response.json();\r",
									"    pm.expect(client[\"name\"]).to.eq(\"Joogle\");\r",
									"    pm.expect(client[\"id\"]).to.exist;\r",
									"    pm.expect(client[\"industry\"]).to.eq(\"Information Technology\");\r",
									"    pm.expect(client[\"join_date\"]).to.eq(\"2019-06-05\");\r",
									"    var self_url = url + \"/clients/\" +  client[\"id\"];\r",
									"    pm.expect(client[\"self\"]).to.eq(self_url);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Joogle\",\r\n    \"join_date\": \"2019-06-05\",\r\n    \"industry\": \"Information Technology\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/clients",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"clients"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Client 1 - Invalid Request Body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST Request with no request body - Response 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"The Simpsons Company\",\r\n    \"join_date\": \"2020-07-05\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/clients",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"clients"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET All clients",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 status code\", function () {\r",
									"    //Check for 200 status code\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"console.log(pm.response.json()[\"clients\"]);\r",
									"\r",
									"pm.test(\"5 Entities exist\", function(){\r",
									"   pm.expect(pm.response.json()[\"clients\"].length).to.be.at.least(5);\r",
									"});\r",
									"\r",
									"var url = pm.environment.get(\"app_url\");\r",
									"pm.test(\"Next url exists\", function(){\r",
									"    var next_url = url + \"/clients?limit=0&offset=5\";\r",
									"    pm.expect(pm.response.json()[\"next\"]).to.eq(next_url);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/clients",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"clients"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET clients limit=5 offset=5 Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 status code\", function () {\r",
									"    //Check for 200 status code\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app_url}}/clients?limit=5&offset=5",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"clients"
							],
							"query": [
								{
									"key": "limit",
									"value": "5"
								},
								{
									"key": "offset",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - (Wrong Accept Type) - Clients",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Incorrect Accept-Type - Response 406\", function () {\r",
									"    pm.response.to.have.status(406);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{app_url}}/clients",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"clients"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE- (Invalid Method) - Clients",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid Method for Route - Response 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{app_url}}/clients",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"clients"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT- (Invalid Method) - Clients",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid Method for Route - Response 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{app_url}}/clients",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"clients"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - (Invalid Method) - Clients",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid Method for Route - Response 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{app_url}}/clients",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"clients"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - (Invalid Method) - Clients/client_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid Method for Route - Response 405\", function () {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{app_url}}/clients/{{client_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"clients",
								"{{client_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Incorrect Client ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"404 status code\", function () {\r",
									"    //Check for 404 status code\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/clients/{{client_incorrect_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"clients",
								"{{client_incorrect_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET * Client 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 status code\", function () {\r",
									"    //Check for 200 status code\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"content = pm.response.json();\r",
									"const client_attr_list = [\"id\", \"industry\", \"join_date\", \"name\", \"projects\",\"self\"];\r",
									"\r",
									"pm.test(\"6 client entity attributes exist\", function(){\r",
									"    var attribute_list = [];\r",
									"    for(let key in content){\r",
									"        attribute_list.push(key)\r",
									"        console.log(\"key: \", key);\r",
									"    }\r",
									"   pm.expect(attribute_list).to.have.all.members(client_attr_list);\r",
									"});\r",
									"\r",
									"var url = pm.environment.get(\"app_url\");\r",
									"pm.test(\"Next url exists\", function(){\r",
									"    var self_url = url + \"/clients/\" + pm.environment.get(\"client_1\");\r",
									"    pm.expect(content[\"self\"]).to.eq(self_url);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/clients/{{client_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"clients",
								"{{client_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET  Client 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 status code\", function () {\r",
									"    //Check for 200 status code\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/clients/{{client_5}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"clients",
								"{{client_5}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - (Wrong Accept Type) - Clients/client_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Incorrect Accept-Type - Response 406\", function () {\r",
									"    pm.response.to.have.status(406);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{app_url}}/clients/{{client_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"clients",
								"{{client_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST [Method Not Allowed] Clients/client_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"405 status code\", function () {\r",
									"    //Check for 405 status code\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{app_url}}/clients/{{client_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"clients",
								"{{client_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT (Invalid Request Body) - client 1 - with User 1 - JWT1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"400 status code\", function () {\r",
									"    //Check for 400 status code\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"The Simpsons Company\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"industry\": \"Financials\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/clients/{{client_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"clients",
								"{{client_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH (Invalid Request Body) - client 1 - with User 1 - JWT1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"400 status code\", function () {\r",
									"    //Check for 400 status code\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"a\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/clients/{{client_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"clients",
								"{{client_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT (No JWT) - client 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"401 status code\", function () {\r",
									"    //Check for 401 status code\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"The Simpsons Company\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"industry\": \"Financials\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/clients/{{client_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"clients",
								"{{client_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE (No JWT) - client 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"401 status code\", function () {\r",
									"    //Check for 401 status code\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"The Simpsons Company\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"industry\": \"Financials\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/clients/{{client_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"clients",
								"{{client_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH (No JWT) - client 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"401 status code\", function () {\r",
									"    //Check for 401 status code\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"The Simpsons Company\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"industry\": \"Financials\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/clients/{{client_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"clients",
								"{{client_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT (Invalid JWT - Not Admin) - client 1 - with User 2- JWT2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"403 status code\", function () {\r",
									"    //Check for 403 status code\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt2}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"The Simpsons Company\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"industry\": \"Financials\",\r\n    \"projects\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/clients/{{client_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"clients",
								"{{client_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH (Invalid JWT - Not Admin) - client 1 - with User 2- JWT2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"403 status code\", function () {\r",
									"    //Check for 403 status code\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt2}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"The Simpsons Company\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"industry\": \"Financials\",\r\n    \"projects\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/clients/{{client_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"clients",
								"{{client_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE (Invalid JWT - Not Admin) - client 1 - with User 2- JWT2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"403 status code\", function () {\r",
									"    //Check for 403 status code\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt2}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"The Simpsons Company\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"industry\": \"Financials\",\r\n    \"projects\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/clients/{{client_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"clients",
								"{{client_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT (Wrong Client ID) - client 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"404 status code\", function () {\r",
									"    //Check for 404 status code\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"The Simpsons Company\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"industry\": \"Financials\",\r\n    \"projects\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/clients/{{client_id_incorrect}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"clients",
								"{{client_id_incorrect}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH (Wrong Client ID) - client 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"404 status code\", function () {\r",
									"    //Check for 404 status code\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"The Simpsons Company\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"industry\": \"Financials\",\r\n    \"projects\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/clients/{{client_id_incorrect}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"clients",
								"{{client_id_incorrect}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE (Wrong Client ID) - client 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"404 status code\", function () {\r",
									"    //Check for 404 status code\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"The Simpsons Company\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"industry\": \"Financials\",\r\n    \"projects\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/clients/{{client_id_incorrect}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"clients",
								"{{client_id_incorrect}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT (Wrong Content-Type) - client 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"415 status code\", function () {\r",
									"    //Check for 415 status code\r",
									"    pm.response.to.have.status(415);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/csv",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{app_url}}/clients/{{client_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"clients",
								"{{client_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH (Wrong Content-Type) - client 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"415 status code\", function () {\r",
									"    //Check for 415 status code\r",
									"    pm.response.to.have.status(415);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/csv",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{app_url}}/clients/{{client_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"clients",
								"{{client_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT (Wrong Accept header) - client 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"406 status code\", function () {\r",
									"    //Check for 406 status code\r",
									"    pm.response.to.have.status(406);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/csv",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Accept",
								"value": "text/csv",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Bart Simpson\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"specialty\": \"Chaos\",\r\n    \"projects\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/clients/{{client_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"clients",
								"{{client_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE  client 1 - with Token and Admin Access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 status code\", function () {\r",
									"    //Check for 204 status code\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/clients/{{client_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"clients",
								"{{client_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "RE POST client 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"201 status code\", function () {\r",
									"    //Check for 201 status code\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"client_1\",pm.response.json()[\"id\"]);\r",
									"pm.environment.set(\"client_incorrect_id\",1);\r",
									"\r",
									"var url = pm.environment.get(\"app_url\");\r",
									"pm.test(\"content is valid\", function () {\r",
									"    let client = pm.response.json();\r",
									"    pm.expect(client[\"name\"]).to.eq(\"The Simpsons Company\");\r",
									"    pm.expect(client[\"id\"]).to.exist;\r",
									"    pm.expect(client[\"industry\"]).to.eq(\"Financials\");\r",
									"    pm.expect(client[\"join_date\"]).to.eq(\"2020-07-05\");\r",
									"    var self_url = url + \"/clients/\" +  client[\"id\"];\r",
									"    pm.expect(client[\"self\"]).to.eq(self_url);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"The Simpsons Company\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"industry\": \"Financials\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/clients",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"clients"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE  client 1 - without Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"401 status code\", function () {\r",
									"    //Check for 401 status code\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"The Simpsons Company\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"industry\": \"Financials\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/clients/{{client_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"clients",
								"{{client_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE  client 1 - User 2 with Token, No Admin Access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"403 status code\", function () {\r",
									"    //Check for 403 status code\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt2}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"The Simpsons Company\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"industry\": \"Financials\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/clients/{{client_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"clients",
								"{{client_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "EDIT [PUT] - Client 1 -Invalid Request Body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"PUT Request with no request body - Response 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"b\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/clients/{{client_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"clients",
								"{{client_1}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Projects-Clients",
			"item": [
				{
					"name": "PUT (No JWT) - [Project 5 / Client 5]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"401 status code\", function () {\r",
									"    //Check for 401 status code\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"The Simpsons Company\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"industry\": \"Financials\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/projects/{{user1_project5_id}}/clients/{{client_5}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects",
								"{{user1_project5_id}}",
								"clients",
								"{{client_5}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE (No JWT) - [Project 5 / Client 5]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"401 status code\", function () {\r",
									"    //Check for 401 status code\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"The Simpsons Company\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"industry\": \"Financials\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/projects/{{user1_project5_id}}/clients/{{client_5}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects",
								"{{user1_project5_id}}",
								"clients",
								"{{client_5}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT (Invalid JWT - Not Owner) -  [Project 5 / Client 5] - JWT2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"403 status code\", function () {\r",
									"    //Check for 403 status code\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt2}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"The Simpsons Company\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"industry\": \"Financials\",\r\n    \"projects\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/projects/{{user1_project5_id}}/clients/{{client_5}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects",
								"{{user1_project5_id}}",
								"clients",
								"{{client_5}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE (Invalid JWT - Not Owner) -  [Project 5 / Client 5] - JWT2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"403 status code\", function () {\r",
									"    //Check for 403 status code\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt2}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"The Simpsons Company\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"industry\": \"Financials\",\r\n    \"projects\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/projects/{{user1_project5_id}}/clients/{{client_5}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects",
								"{{user1_project5_id}}",
								"clients",
								"{{client_5}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT (Wrong Client ID)   [Project 5 / Client 5]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"404 status code\", function () {\r",
									"    //Check for 404 status code\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"The Simpsons Company\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"industry\": \"Financials\",\r\n    \"projects\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/projects/{{user1_project5_id}}/clients/{{client_id_incorrect}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects",
								"{{user1_project5_id}}",
								"clients",
								"{{client_id_incorrect}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE (Wrong Client ID)   [Project 5 / Client 5]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"404 status code\", function () {\r",
									"    //Check for 404 status code\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"The Simpsons Company\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"industry\": \"Financials\",\r\n    \"projects\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/projects/{{user1_project5_id}}/clients/{{client_id_incorrect}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects",
								"{{user1_project5_id}}",
								"clients",
								"{{client_id_incorrect}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT [Projects-Clients]  client 5 on project 5 - User 1 token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 status code\", function () {\r",
									"    //Check for 204 status code\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"// -----------[After: Check Projects ] ------------------------\r",
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get('app_url')}` + \"/projects/\" + `${pm.environment.get('user1_project5_id')}`,\r",
									"    method: 'GET',\r",
									"    auth: {\r",
									"        type: \"bearer\",\r",
									"        bearer: [\r",
									"            {\r",
									"                key: \"token\",\r",
									"                value: `${pm.environment.get('jwt1')}`,\r",
									"                type: \"string\"\r",
									"            }\r",
									"        ]\r",
									"    },\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}, function (err, res) {\r",
									"        if(err) {\r",
									"            console.log(\"error: \" + err);\r",
									"        } else {\r",
									"        \r",
									"            var content = res.json()\r",
									"            let target_entity_id = pm.environment.get(\"client_5\");\r",
									"            let entity_after = content[\"client\"][\"id\"];\r",
									"            var entity_before = pm.collectionVariables.get(\"client_before\");\r",
									"            pm.test(\"Client added to project\", function(){\r",
									"                pm.expect(entity_before).to.be.null;\r",
									"                pm.expect(target_entity_id).to.eql(entity_after);\r",
									"            });\r",
									"\r",
									"        }\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.clear();\r",
									"\r",
									"// -----------[Before: Check Projects ] ------------------------\r",
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get('app_url')}` + \"/projects/\" + `${pm.environment.get('user1_project5_id')}`,\r",
									"    method: 'GET',\r",
									"    auth: {\r",
									"        type: \"bearer\",\r",
									"        bearer: [\r",
									"            {\r",
									"                key: \"token\",\r",
									"                value: `${pm.environment.get('jwt1')}`,\r",
									"                type: \"string\"\r",
									"            }\r",
									"        ]\r",
									"    },\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}, function (err, res) {\r",
									"        if(err) {\r",
									"            console.log(\"error: \" + err);\r",
									"        } else {\r",
									"        \r",
									"            var content = res.json()\r",
									"            var attr = \"client\";\r",
									"        \r",
									"            for(let key in content){\r",
									"                // console.log(\"key: \", key);\r",
									"                // console.log(\"value: \",content[key]);\r",
									"                if(key == attr){\r",
									"                    pm.collectionVariables.set(\"client_before\", content[key]);\r",
									"                }\r",
									"                \r",
									"            };\r",
									"\r",
									"        }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{app_url}}/projects/{{user1_project5_id}}/clients/{{client_5}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects",
								"{{user1_project5_id}}",
								"clients",
								"{{client_5}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT (Client Already Assigned a Project)   [Project 1 / Client 5]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"403 status code\", function () {\r",
									"    //Check for 403 status code\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"The Simpsons Company\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"industry\": \"Financials\",\r\n    \"projects\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/projects/{{user1_project1_id}}/clients/{{client_5}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects",
								"{{user1_project1_id}}",
								"clients",
								"{{client_5}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT (Project already has a Client)   [Project 5 / Client 1]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"403 status code\", function () {\r",
									"    //Check for 403 status code\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"The Simpsons Company\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"industry\": \"Financials\",\r\n    \"projects\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/projects/{{user1_project5_id}}/clients/{{client_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects",
								"{{user1_project5_id}}",
								"clients",
								"{{client_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE (Client 5 Already Assigned to a Project)   [Project 1 / Client 5]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"403 status code\", function () {\r",
									"    //Check for 403 status code\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"The Simpsons Company\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"industry\": \"Financials\",\r\n    \"projects\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/projects/{{user1_project1_id}}/clients/{{client_5}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects",
								"{{user1_project1_id}}",
								"clients",
								"{{client_5}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE (Project 5 not Assigned to Client 1)   [Project 5 / Client 1]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"403 status code\", function () {\r",
									"    //Check for 403 status code\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"The Simpsons Company\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"industry\": \"Financials\",\r\n    \"projects\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/projects/{{user1_project5_id}}/clients/{{client_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects",
								"{{user1_project5_id}}",
								"clients",
								"{{client_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE - [Project 5 / Client 5]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 status code\", function () {\r",
									"    //Check for 204 status code\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"// -----------[After: Check Projects ] ------------------------\r",
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get('app_url')}` + \"/projects/\" + `${pm.environment.get('user1_project5_id')}`,\r",
									"    method: 'GET',\r",
									"    auth: {\r",
									"        type: \"bearer\",\r",
									"        bearer: [\r",
									"            {\r",
									"                key: \"token\",\r",
									"                value: `${pm.environment.get('jwt1')}`,\r",
									"                type: \"string\"\r",
									"            }\r",
									"        ]\r",
									"    },\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}, function (err, res) {\r",
									"        if(err) {\r",
									"            console.log(\"error: \" + err);\r",
									"        } else {\r",
									"        \r",
									"            var content = res.json()\r",
									"            let target_entity_id = pm.environment.get(\"client_5\");\r",
									"            let entity_after = content[\"client\"];\r",
									"            var entity_before = pm.collectionVariables.get(\"client_before\");\r",
									"            pm.test(\"Client removed from project\", function(){\r",
									"                pm.expect(entity_before[\"id\"]).to.eq(target_entity_id);\r",
									"                pm.expect(entity_after).to.be.null;\r",
									"            });\r",
									"\r",
									"        }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.clear();\r",
									"\r",
									"// -----------[Before: Check Projects ] ------------------------\r",
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get('app_url')}` + \"/projects/\" + `${pm.environment.get('user1_project5_id')}`,\r",
									"    method: 'GET',\r",
									"    auth: {\r",
									"        type: \"bearer\",\r",
									"        bearer: [\r",
									"            {\r",
									"                key: \"token\",\r",
									"                value: `${pm.environment.get('jwt1')}`,\r",
									"                type: \"string\"\r",
									"            }\r",
									"        ]\r",
									"    },\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}, function (err, res) {\r",
									"        if(err) {\r",
									"            console.log(\"error: \" + err);\r",
									"        } else {\r",
									"        \r",
									"            var content = res.json()\r",
									"            var attr = \"client\";\r",
									"        \r",
									"            for(let key in content){\r",
									"                // console.log(\"key: \", key);\r",
									"                // console.log(\"value: \",content[key]);\r",
									"                if(key == attr){\r",
									"                    pm.collectionVariables.set(\"client_before\", content[key]);\r",
									"                }\r",
									"                \r",
									"            };\r",
									"\r",
									"        }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"The Simpsons Company\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"industry\": \"Financials\",\r\n    \"projects\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/projects/{{user1_project5_id}}/clients/{{client_5}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects",
								"{{user1_project5_id}}",
								"clients",
								"{{client_5}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Projects-Team Members",
			"item": [
				{
					"name": "PUT (No JWT) - [Project 5 / Team_Member 3]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"401 status code\", function () {\r",
									"    //Check for 401 status code\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"The Simpsons Company\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"industry\": \"Financials\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/projects/{{user1_project5_id}}/team_members/{{team_member_3}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects",
								"{{user1_project5_id}}",
								"team_members",
								"{{team_member_3}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE (No JWT) - [Project 5 / Team_Member 3]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"401 status code\", function () {\r",
									"    //Check for 401 status code\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"The Simpsons Company\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"industry\": \"Financials\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/projects/{{user1_project5_id}}/team_members/{{team_member_3}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects",
								"{{user1_project5_id}}",
								"team_members",
								"{{team_member_3}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT (Invalid JWT - Not Owner)  - [Project 5 / Team_Member 3]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"403 status code\", function () {\r",
									"    //Check for 403 status code\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt2}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"The Simpsons Company\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"industry\": \"Financials\",\r\n    \"projects\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/projects/{{user1_project5_id}}/team_members/{{team_member_3}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects",
								"{{user1_project5_id}}",
								"team_members",
								"{{team_member_3}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE (Invalid JWT - Not Owner)  - [Project 5 / Team_Member 3]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"403 status code\", function () {\r",
									"    //Check for 403 status code\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt2}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"The Simpsons Company\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"industry\": \"Financials\",\r\n    \"projects\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/projects/{{user1_project5_id}}/team_members/{{team_member_3}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects",
								"{{user1_project5_id}}",
								"team_members",
								"{{team_member_3}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT (Wrong Team Member ID)   - [Project 5 / Team_Member 3]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"404 status code\", function () {\r",
									"    //Check for 404 status code\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"The Simpsons Company\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"industry\": \"Financials\",\r\n    \"projects\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/projects/{{user1_project5_id}}/team_members/{{team_member_incorrect_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects",
								"{{user1_project5_id}}",
								"team_members",
								"{{team_member_incorrect_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE (Wrong Team Member ID)   - [Project 5 / Team_Member 3]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"404 status code\", function () {\r",
									"    //Check for 404 status code\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"The Simpsons Company\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"industry\": \"Financials\",\r\n    \"projects\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/projects/{{user1_project5_id}}/team_members/{{team_member_incorrect_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects",
								"{{user1_project5_id}}",
								"team_members",
								"{{team_member_incorrect_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT [Projects-Team_Member]  TM 3 on project 5 - User 1 token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 status code\", function () {\r",
									"    //Check for 204 status code\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"// -----------[After: Check Projects ] ------------------------\r",
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get('app_url')}` + \"/projects/\" + `${pm.environment.get('user1_project5_id')}`,\r",
									"    method: 'GET',\r",
									"    auth: {\r",
									"        type: \"bearer\",\r",
									"        bearer: [\r",
									"            {\r",
									"                key: \"token\",\r",
									"                value: `${pm.environment.get('jwt1')}`,\r",
									"                type: \"string\"\r",
									"            }\r",
									"        ]\r",
									"    },\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}, function (err, res) {\r",
									"        if(err) {\r",
									"            console.log(\"error: \" + err);\r",
									"        } else {\r",
									"        \r",
									"            var content = res.json()\r",
									"            let target_entity_id = pm.environment.get(\"team_member_3\");\r",
									"            let team_after = content[\"team_members\"];\r",
									"            let member_list_after = [];\r",
									"\r",
									"            if(team_after !== []){\r",
									"                for(let idx in team_after){\r",
									"                    console.log(\"team: \", team_after[idx]);\r",
									"                    console.log(\"team id: \", team_after[idx][\"id\"]);\r",
									"                    member_list_after.push(team_after[idx][\"id\"]);\r",
									"                }\r",
									"            }\r",
									"            console.log(\"member_list_after: \", member_list_after);\r",
									"            pm.test(\"team members added\", function(){\r",
									"                pm.expect(pm.collectionVariables.get(\"member_list_before\")).to.not.eql(member_list_after);\r",
									"\r",
									"                pm.expect(member_list_after).to.include(target_entity_id);\r",
									"            });\r",
									"\r",
									"        }\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.clear();\r",
									"\r",
									"// -----------[Before: Check Projects ] ------------------------\r",
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get('app_url')}` + \"/projects/\" + `${pm.environment.get('user1_project5_id')}`,\r",
									"    method: 'GET',\r",
									"    auth: {\r",
									"        type: \"bearer\",\r",
									"        bearer: [\r",
									"            {\r",
									"                key: \"token\",\r",
									"                value: `${pm.environment.get('jwt1')}`,\r",
									"                type: \"string\"\r",
									"            }\r",
									"        ]\r",
									"    },\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}, function (err, res) {\r",
									"        if(err) {\r",
									"            console.log(\"error: \" + err);\r",
									"        } else {\r",
									"        \r",
									"            var content = res.json()\r",
									"            var attr = \"team_members\";\r",
									"            let member_list_before = [];\r",
									"            var team_before = content[\"team_members\"];\r",
									"\r",
									"            if(team_before !== []){\r",
									"                for(let idx in team_before){\r",
									"                    console.log(\"team: \", team_before[idx]);\r",
									"                    console.log(\"team id: \", team_before[idx][\"id\"]);\r",
									"                    member_list_before.push(team_before[idx][\"id\"]);\r",
									"                }\r",
									"            }\r",
									"            console.log(\"member_list_before: \", member_list_before);\r",
									"            pm.collectionVariables.set('member_list_before', member_list_before);\r",
									"                \r",
									"            };\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{app_url}}/projects/{{user1_project5_id}}/team_members/{{team_member_3}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects",
								"{{user1_project5_id}}",
								"team_members",
								"{{team_member_3}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT (Team Member Already Assigned a Project)   [Project 1 / TM 3]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"403 status code\", function () {\r",
									"    //Check for 403 status code\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"The Simpsons Company\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"industry\": \"Financials\",\r\n    \"projects\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/projects/{{user1_project1_id}}/team_members/{{team_member_3}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects",
								"{{user1_project1_id}}",
								"team_members",
								"{{team_member_3}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE (Team Member assigned different Project 5)   [Project 1 / TM 3]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"403 status code\", function () {\r",
									"    //Check for 403 status code\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"The Simpsons Company\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"industry\": \"Financials\",\r\n    \"projects\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/projects/{{user1_project1_id}}/team_members/{{team_member_3}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects",
								"{{user1_project1_id}}",
								"team_members",
								"{{team_member_3}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE  [Projects-Team_Member]  TM 3 on project 5 - User 1 token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 status code\", function () {\r",
									"    //Check for 204 status code\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"// -----------[After: Check Projects ] ------------------------\r",
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get('app_url')}` + \"/projects/\" + `${pm.environment.get('user1_project5_id')}`,\r",
									"    method: 'GET',\r",
									"    auth: {\r",
									"        type: \"bearer\",\r",
									"        bearer: [\r",
									"            {\r",
									"                key: \"token\",\r",
									"                value: `${pm.environment.get('jwt1')}`,\r",
									"                type: \"string\"\r",
									"            }\r",
									"        ]\r",
									"    },\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}, function (err, res) {\r",
									"        if(err) {\r",
									"            console.log(\"error: \" + err);\r",
									"        } else {\r",
									"        \r",
									"            var content = res.json()\r",
									"            let target_entity_id = pm.environment.get(\"team_member_3\");\r",
									"            let team_after = content[\"team_members\"];\r",
									"            let member_list_after = [];\r",
									"\r",
									"            if(team_after !== []){\r",
									"                for(let idx in team_after){\r",
									"                    console.log(\"team: \", team_after[idx]);\r",
									"                    console.log(\"team id: \", team_after[idx][\"id\"]);\r",
									"                    member_list_after.push(team_after[idx][\"id\"]);\r",
									"                }\r",
									"            }\r",
									"            console.log(\"member_list_after: \", member_list_after);\r",
									"            pm.test(\"team members removed successfully\", function(){\r",
									"                pm.expect(pm.collectionVariables.get(\"member_list_before\")).to.not.eql(member_list_after);\r",
									"\r",
									"                pm.expect(member_list_after).to.not.include(target_entity_id);\r",
									"            });\r",
									"\r",
									"        }\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.clear();\r",
									"\r",
									"// -----------[Before: Check Projects ] ------------------------\r",
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get('app_url')}` + \"/projects/\" + `${pm.environment.get('user1_project5_id')}`,\r",
									"    method: 'GET',\r",
									"    auth: {\r",
									"        type: \"bearer\",\r",
									"        bearer: [\r",
									"            {\r",
									"                key: \"token\",\r",
									"                value: `${pm.environment.get('jwt1')}`,\r",
									"                type: \"string\"\r",
									"            }\r",
									"        ]\r",
									"    },\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}, function (err, res) {\r",
									"        if(err) {\r",
									"            console.log(\"error: \" + err);\r",
									"        } else {\r",
									"        \r",
									"            var content = res.json()\r",
									"            var attr = \"team_members\";\r",
									"            let member_list_before = [];\r",
									"            var team_before = content[\"team_members\"];\r",
									"\r",
									"            if(team_before !== []){\r",
									"                for(let idx in team_before){\r",
									"                    console.log(\"team: \", team_before[idx]);\r",
									"                    console.log(\"team id: \", team_before[idx][\"id\"]);\r",
									"                    member_list_before.push(team_before[idx][\"id\"]);\r",
									"                }\r",
									"            }\r",
									"            console.log(\"member_list_before: \", member_list_before);\r",
									"            pm.collectionVariables.set('member_list_before', member_list_before);\r",
									"                \r",
									"            };\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/projects/{{user1_project5_id}}/team_members/{{team_member_3}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects",
								"{{user1_project5_id}}",
								"team_members",
								"{{team_member_3}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT  [Project-Team_Member] -  team_member 3 on project 5 - User 1 token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 status code\", function () {\r",
									"    //Check for 204 status code\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"// --- Check if project's team_members have changed -- -\r",
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get('app_url')}` + \"/projects/\" + `${pm.environment.get('user1_project5_id')}`,\r",
									"    method: 'GET',\r",
									"    auth: {\r",
									"        type: \"bearer\",\r",
									"        bearer: [\r",
									"            {\r",
									"                key: \"token\",\r",
									"                value: `${pm.environment.get('jwt1')}`,\r",
									"                type: \"string\"\r",
									"            }\r",
									"        ]\r",
									"    },\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}, function (err, res) {\r",
									"        if(err) {\r",
									"            console.log(\"error: \" + err);\r",
									"        } else {\r",
									"            let member_list_after = [];\r",
									"            var project_content = res.json();\r",
									"            var team = project_content[\"team_members\"];\r",
									"            if(team !== []){\r",
									"                for(let idx in team){\r",
									"                    console.log(\"team: \", team[idx]);\r",
									"                    console.log(\"team id: \", team[idx][\"id\"]);\r",
									"                    member_list_after.push(team[idx][\"id\"]);\r",
									"                }\r",
									"            }\r",
									"            console.log(\"Team Member added to Project \", member_list_after);\r",
									"            pm.test(\"Project's team_member added\",function() {\r",
									"                pm.expect(member_list_after).to.include(pm.environment.get(\"team_member_3\"));\r",
									"            });\r",
									"        }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.clear();\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get('app_url')}` + \"/projects/\" + `${pm.environment.get('user1_project5_id')}`,\r",
									"    method: 'GET',\r",
									"    auth: {\r",
									"        type: \"bearer\",\r",
									"        bearer: [\r",
									"            {\r",
									"                key: \"token\",\r",
									"                value: `${pm.environment.get('jwt1')}`,\r",
									"                type: \"string\"\r",
									"            }\r",
									"        ]\r",
									"    },\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}, function (err, res) {\r",
									"        if(err) {\r",
									"            console.log(\"error: \" + err);\r",
									"        } else {\r",
									"            let member_list = [];\r",
									"            var project_content = res.json();\r",
									"            var team = project_content[\"team_members\"];\r",
									"            if(team !== []){\r",
									"                for(let idx in team){\r",
									"                    console.log(\"team: \", team[idx]);\r",
									"                    console.log(\"team id: \", team[idx][\"id\"]);\r",
									"                    member_list.push(team[idx][\"id\"]);\r",
									"                }\r",
									"            }\r",
									"            \r",
									"        }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{app_url}}/projects/{{user1_project5_id}}/team_members/{{team_member_3}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects",
								"{{user1_project5_id}}",
								"team_members",
								"{{team_member_3}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE [Project-Team_Member] -  team_member 3 from project 5 - User 1 token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 status code\", function () {\r",
									"    //Check for 204 status code\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"// --- Check if project's team_members have changed -- -\r",
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get('app_url')}` + \"/projects/\" + `${pm.environment.get('user1_project5_id')}`,\r",
									"    method: 'GET',\r",
									"    auth: {\r",
									"        type: \"bearer\",\r",
									"        bearer: [\r",
									"            {\r",
									"                key: \"token\",\r",
									"                value: `${pm.environment.get('jwt1')}`,\r",
									"                type: \"string\"\r",
									"            }\r",
									"        ]\r",
									"    },\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}, function (err, res) {\r",
									"        if(err) {\r",
									"            console.log(\"error: \" + err);\r",
									"        } else {\r",
									"            let member_list_after = [];\r",
									"            var project_content = res.json();\r",
									"            var team = project_content[\"team_members\"];\r",
									"            if(team !== []){\r",
									"                for(let idx in team){\r",
									"                    console.log(\"team: \", team[idx]);\r",
									"                    console.log(\"team id: \", team[idx][\"id\"]);\r",
									"                    member_list_after.push(team[idx][\"id\"]);\r",
									"                }\r",
									"            }\r",
									"            console.log(\"member_list after: \", member_list_after);\r",
									"            pm.test(\"Project's team_members changed\",function() {\r",
									"                pm.expect(pm.collectionVariables.get(\"member_list\")).to.not.eql(member_list_after);\r",
									"            });\r",
									"        }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.clear();\r",
									"\r",
									"// var request_body = {\r",
									"//     \"projects\": {\r",
									"//         \"id\": parseInt(`${pm.environment.get('user1_project2_id')}`),\r",
									"//         \"name\": \"Building Renovation\"\r",
									"\r",
									"//     },\r",
									"//     \"join_date\": \"2020-07-05\",\r",
									"//     \"name\": \"Bart Simpson\",\r",
									"//     \"specialty\": \"Chaos\"\r",
									"// };\r",
									"\r",
									"// {\r",
									"//     \"projects\": null,\r",
									"//     \"join_date\": \"2020-07-05\",\r",
									"//     \"name\": \"Bart Simpson\",\r",
									"//     \"specialty\": \"Chaos\",\r",
									"//     \"id\": 5664022732996608,\r",
									"//     \"self\": \"https://127.0.0.1:8000/team_members/5664022732996608\"\r",
									"// }\r",
									"\r",
									"// var body_str = JSON.stringify(request_body); // body was defined in the previous step.\r",
									"// pm.environment.set('request_body', body_str); // this sets an environment variable with the stringified body\r",
									"// -----------[1. Check if Gist is Starred] ------------------------\r",
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get('app_url')}` + \"/projects/\" + `${pm.environment.get('user1_project5_id')}`,\r",
									"    method: 'GET',\r",
									"    auth: {\r",
									"        type: \"bearer\",\r",
									"        bearer: [\r",
									"            {\r",
									"                key: \"token\",\r",
									"                value: `${pm.environment.get('jwt1')}`,\r",
									"                type: \"string\"\r",
									"            }\r",
									"        ]\r",
									"    },\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}, function (err, res) {\r",
									"        if(err) {\r",
									"            console.log(\"error: \" + err);\r",
									"        } else {\r",
									"            let member_list = [];\r",
									"            var project_content = res.json();\r",
									"            var team = project_content[\"team_members\"];\r",
									"            if(team !== []){\r",
									"                for(let idx in team){\r",
									"                    console.log(\"team: \", team[idx]);\r",
									"                    console.log(\"team id: \", team[idx][\"id\"]);\r",
									"                    member_list.push(team[idx][\"id\"]);\r",
									"                }\r",
									"            }\r",
									"            console.log(\"member_list: \", member_list);\r",
									"            pm.collectionVariables.set('member_list', member_list);\r",
									"           \r",
									"        }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/projects/{{user1_project5_id}}/team_members/{{team_member_3}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects",
								"{{user1_project5_id}}",
								"team_members",
								"{{team_member_3}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT  [Project-Team_Member] -  team_member 1 on project 1 - User 1 token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 status code\", function () {\r",
									"    //Check for 204 status code\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{app_url}}/projects/{{user1_project1_id}}/team_members/{{team_member_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects",
								"{{user1_project1_id}}",
								"team_members",
								"{{team_member_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET team_member 1 after being added to project 1 with Token  - User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 status code\", function () {\r",
									"    //Check for 200 status code\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var value = pm.response.json();\r",
									"console.log(value);\r",
									"const project_1_id = pm.environment.get(\"user1_project1_id\");\r",
									"var url = pm.environment.get(\"app_url\");\r",
									"\r",
									"pm.test(\"content is valid\", function () {\r",
									"    pm.expect(value[\"projects\"][\"id\"]).to.eql(project_1_id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/team_members/{{team_member_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"team_members",
								"{{team_member_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT [Project-Team_Member] -  team_member 2 on project 1 - User 1 token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 status code\", function () {\r",
									"    //Check for 204 status code\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{app_url}}/projects/{{user1_project1_id}}/team_members/{{team_member_2}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects",
								"{{user1_project1_id}}",
								"team_members",
								"{{team_member_2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET team_member 2 after being added to project 1 with Token  - User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 status code\", function () {\r",
									"    //Check for 200 status code\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var value = pm.response.json();\r",
									"console.log(value);\r",
									"const project_1_id = pm.environment.get(\"user1_project1_id\");\r",
									"var url = pm.environment.get(\"app_url\");\r",
									"\r",
									"pm.test(\"content is valid\", function () {\r",
									"    pm.expect(value[\"projects\"][\"id\"]).to.eql(project_1_id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/team_members/{{team_member_2}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"team_members",
								"{{team_member_2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT [Project-Team_Member] - Incorrect ID team_member 1 on project 1 - User 1 token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"404 status code\", function () {\r",
									"    //Check for 404 status code\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{app_url}}/projects/{{user1_project1_id}}/team_members/{{team_member_incorrect_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects",
								"{{user1_project1_id}}",
								"team_members",
								"{{team_member_incorrect_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Project 1 with Team_Member 2 with Token  - User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 status code\", function () {\r",
									"    //Check for 200 status code\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var value = pm.response.json();\r",
									"console.log(value);\r",
									"const team_member_2_id = pm.environment.get(\"team_member_2\");\r",
									"var url = pm.environment.get(\"app_url\");\r",
									"\r",
									"pm.test(\"content is valid\", function () {\r",
									"    var team_member = value[\"team_members\"];\r",
									"    for (let [key, value] of Object.entries(team_member)) {\r",
									"        console.log(\"KEY: \", key, \" VALUE: \", value);\r",
									"        console.log(\"value id: \", value[\"id\"]);\r",
									"        if(value[\"id\"] == team_member_2_id){\r",
									"            console.log(\"team_member_2_id id: \", team_member_2_id);\r",
									"            pm.expect(value[\"id\"]).to.eq(team_member_2_id);\r",
									"            var self_url = url + \"/team_members/\" +  value[\"id\"];\r",
									"            pm.expect(value[\"self\"]).to.eq(self_url);\r",
									"        }\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/projects/{{user1_project1_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects",
								"{{user1_project1_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE [Project-Team_Member] -  team_member 2 from project 1 - User 1 token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 status code\", function () {\r",
									"    //Check for 204 status code\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/projects/{{user1_project1_id}}/team_members/{{team_member_2}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects",
								"{{user1_project1_id}}",
								"team_members",
								"{{team_member_2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE [Project-Team_Member] -  team_member 2 from project 1 AGAIN - User 1 token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"403 status code\", function () {\r",
									"    //Check for 403 status code\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/projects/{{user1_project1_id}}/team_members/{{team_member_2}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects",
								"{{user1_project1_id}}",
								"team_members",
								"{{team_member_2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT team_member 4 on project 2 - User 1 token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 status code\", function () {\r",
									"    //Check for 204 status code\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{app_url}}/projects/{{user1_project2_id}}/team_members/{{team_member_4}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects",
								"{{user1_project2_id}}",
								"team_members",
								"{{team_member_4}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Project 2 with Token  - User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 status code\", function () {\r",
									"    //Check for 200 status code\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var value = pm.response.json();\r",
									"console.log(value);\r",
									"const team_member_2_id = pm.environment.get(\"team_member_2\");\r",
									"var url = pm.environment.get(\"app_url\");\r",
									"\r",
									"pm.test(\"content is valid\", function () {\r",
									"    var team_member = value[\"team_members\"];\r",
									"    for (let [key, value] of Object.entries(team_member)) {\r",
									"        console.log(\"KEY: \", key, \" VALUE: \", value);\r",
									"        console.log(\"value id: \", value[\"id\"]);\r",
									"        pm.expect(value[\"id\"]).to.not.eq(team_member_2_id);\r",
									"        if(value[\"id\"] == team_member_2_id){\r",
									"            console.log(\"team_member_2_id id: \", team_member_2_id);\r",
									"            pm.expect(value[\"id\"]).to.eq(team_member_2_id);\r",
									"            var self_url = url + \"/team_members/\" +  value[\"id\"];\r",
									"            pm.expect(value[\"self\"]).to.eq(self_url);\r",
									"        }\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/projects/{{user1_project2_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects",
								"{{user1_project2_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET team_member 4 after being added to project 2with Token  - User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 status code\", function () {\r",
									"    //Check for 200 status code\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var value = pm.response.json();\r",
									"console.log(value);\r",
									"const project_2_id = pm.environment.get(\"user1_project2_id\");\r",
									"var url = pm.environment.get(\"app_url\");\r",
									"\r",
									"pm.test(\"content is valid\", function () {\r",
									"    pm.expect(value[\"projects\"][\"id\"]).to.eql(project_2_id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/team_members/{{team_member_4}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"team_members",
								"{{team_member_4}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE team_member 4 from project 2 - User 1 token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 status code\", function () {\r",
									"    //Check for 204 status code\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/projects/{{user1_project2_id}}/team_members/{{team_member_4}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects",
								"{{user1_project2_id}}",
								"team_members",
								"{{team_member_4}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE team_member 1 from project 1 - User 1 token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 status code\", function () {\r",
									"    //Check for 204 status code\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/projects/{{user1_project1_id}}/team_members/{{team_member_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects",
								"{{user1_project1_id}}",
								"team_members",
								"{{team_member_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE [Project-Team_Member] - Incorrect ID  team_member 1 from project 1 - User 1 token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"404 status code\", function () {\r",
									"    //Check for 404 status code\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/projects/{{user1_project1_id}}/team_members/{{team_member_incorrect_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects",
								"{{user1_project1_id}}",
								"team_members",
								"{{team_member_incorrect_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET  Project 5 - User 1 Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 status code\", function () {\r",
									"    //Check for 200 status code\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/projects/{{user1_project5_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects",
								"{{user1_project5_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Indirect Projects-Team Members",
			"item": [
				{
					"name": "[PUT] Indirectly Assign Team Member 1 to Project 2 - User 1 - JWT1, Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// -----------[1. Check PUT request to project 2] ------------------------\r",
									"\r",
									"pm.test(\"PUT Request- Response 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"PUT response - project id assigned to team member correctly \", function () {\r",
									"    var put_res_content = pm.response.json();\r",
									"    pm.expect(put_res_content[\"projects\"][\"id\"]).to.eq(pm.environment.get(\"user1_project2_id\"));\r",
									"});\r",
									"pm.test(\"PUT response - project name assigned to team member correctly \", function () {\r",
									"    var put_res_content = pm.response.json();\r",
									"    pm.expect(put_res_content[\"projects\"][\"name\"]).to.eq(pm.environment.get(\"user1_project2_name\"));\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"// -----------[2. Check if Project 2 was updated ] ------------------------\r",
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get('app_url')}` + \"/projects/\" + `${pm.environment.get('user1_project2_id')}`,\r",
									"    method: 'GET',\r",
									"    auth: {\r",
									"        type: \"bearer\",\r",
									"        bearer: [\r",
									"            {\r",
									"                key: \"token\",\r",
									"                value: `${pm.environment.get('jwt1')}`,\r",
									"                type: \"string\"\r",
									"            }\r",
									"        ]\r",
									"    },\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}, function (err, res) {\r",
									"        if(err) {\r",
									"            console.log(\"error: \" + err);\r",
									"        } else {\r",
									"\r",
									"            var content = res.json();\r",
									"            console.log(content);\r",
									"            pm.test(\"project 2 team_members attribute id matches team member 1's id \", function(){\r",
									"                var team_member_list = [];\r",
									"                var team_member_id = pm.environment.get(\"team_member_1\");\r",
									"                console.log(\"teammember id: \", team_member_id);\r",
									"                // team_member_list.push(team_member_element);\r",
									"                for(let index in content[\"team_members\"]){\r",
									"                    team_member_list.push(content[\"team_members\"][index][\"id\"]);\r",
									"                }\r",
									"                console.log(\"team_member_list: \", team_member_list);\r",
									"                pm.expect(team_member_list).to.deep.include(team_member_id);\r",
									"\r",
									"        });\r",
									"        };\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.clear();\r",
									"\r",
									"var request_body = {\r",
									"    \"projects\": {\r",
									"        \"id\": parseInt(`${pm.environment.get('user1_project2_id')}`),\r",
									"        \"name\": \"Building Renovation\"\r",
									"\r",
									"    },\r",
									"    \"join_date\": \"2020-07-05\",\r",
									"    \"name\": \"Bart Simpson\",\r",
									"    \"specialty\": \"Chaos\"\r",
									"};\r",
									"\r",
									"// {\r",
									"//     \"projects\": null,\r",
									"//     \"join_date\": \"2020-07-05\",\r",
									"//     \"name\": \"Bart Simpson\",\r",
									"//     \"specialty\": \"Chaos\",\r",
									"//     \"id\": 5664022732996608,\r",
									"//     \"self\": \"https://127.0.0.1:8000/team_members/5664022732996608\"\r",
									"// }\r",
									"\r",
									"var body_str = JSON.stringify(request_body); // body was defined in the previous step.\r",
									"pm.environment.set('request_body', body_str); // this sets an environment variable with the stringified body\r",
									"// -----------[1. Check if Gist is Starred] ------------------------\r",
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get('app_url')}` + \"/projects/\" + `${pm.environment.get('user1_project2_id')}`,\r",
									"    method: 'GET',\r",
									"    auth: {\r",
									"        type: \"bearer\",\r",
									"        bearer: [\r",
									"            {\r",
									"                key: \"token\",\r",
									"                value: `${pm.environment.get('jwt1')}`,\r",
									"                type: \"string\"\r",
									"            }\r",
									"        ]\r",
									"    },\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}, function (err, res) {\r",
									"        if(err) {\r",
									"            console.log(\"error: \" + err);\r",
									"        } else {\r",
									"        \r",
									"            var content = res.json()\r",
									"\r",
									"        }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/team_members/{{team_member_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"team_members",
								"{{team_member_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[PATCH] Indirectly Remove Team Member 1 - remove Project 2 - User 1 - JWT1, Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// -----------[1. Check PUT request to project 1] ------------------------\r",
									"\r",
									"pm.test(\"Revert PATCH Request- Response 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"// -----------[3. Check if starred with GET request to see if the Gist is starred] ------------------------\r",
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get('app_url')}` + \"/projects/\" + `${pm.environment.get('user1_project2_id')}`,\r",
									"    method: 'GET',\r",
									"    auth: {\r",
									"        type: \"bearer\",\r",
									"        bearer: [\r",
									"            {\r",
									"                key: \"token\",\r",
									"                value: `${pm.environment.get('jwt1')}`,\r",
									"                type: \"string\"\r",
									"            }\r",
									"        ]\r",
									"    },\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}, function (err, res) {\r",
									"        if(err) {\r",
									"            console.log(\"error: \" + err);\r",
									"        } else {\r",
									"\r",
									"            var content = res.json();\r",
									"            console.log(content);\r",
									"            pm.test(\"project 2 team_members attribute id not contain team member 1's id \", function(){\r",
									"                var team_member_list = [];\r",
									"                var team_member_id = pm.environment.get(\"team_member_1\");\r",
									"                console.log(\"teammember id: \", team_member_id);\r",
									"                // team_member_list.push(team_member_element);\r",
									"                for(let index in content[\"team_members\"]){\r",
									"                    team_member_list.push(content[\"team_members\"][index][\"id\"]);\r",
									"                }\r",
									"                console.log(\"team_member_list: \", team_member_list);\r",
									"                pm.expect(team_member_list).to.not.deep.include(team_member_id);\r",
									"\r",
									"        });\r",
									"        };\r",
									"});\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get('app_url')}` + \"/team_members/\" + `${pm.environment.get('team_member_1')}`,\r",
									"    method: 'GET',\r",
									"    auth: {\r",
									"        type: \"bearer\",\r",
									"        bearer: [\r",
									"            {\r",
									"                key: \"token\",\r",
									"                value: `${pm.environment.get('jwt1')}`,\r",
									"                type: \"string\"\r",
									"            }\r",
									"        ]\r",
									"    },\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}, function (err2, res2) {\r",
									"        if(err2) {\r",
									"            console.log(\"error: \" + err2);\r",
									"        } else {\r",
									"\r",
									"\r",
									"            var content2 = res2.json();\r",
									"            console.log(content2);                \r",
									"            pm.test(\"PATCH Result - team_member 1 entity's project attribute - project 2's id and name removed correctly \", function () {\r",
									"\r",
									"                pm.expect(content2[\"projects\"]).to.eq(null);\r",
									"            });\r",
									"        };\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.clear();\r",
									"\r",
									"var request_body = {\r",
									"    \"projects\": null\r",
									"};\r",
									"\r",
									"var body_str = JSON.stringify(request_body); // body was defined in the previous step.\r",
									"pm.environment.set('request_body', body_str); // this sets an environment variable with the stringified body\r",
									"// -----------[1. Check if Gist is Starred] ------------------------\r",
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get('app_url')}` + \"/projects/\" + `${pm.environment.get('user1_project2_id')}`,\r",
									"    method: 'GET',\r",
									"    auth: {\r",
									"        type: \"bearer\",\r",
									"        bearer: [\r",
									"            {\r",
									"                key: \"token\",\r",
									"                value: `${pm.environment.get('jwt1')}`,\r",
									"                type: \"string\"\r",
									"            }\r",
									"        ]\r",
									"    },\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}, function (err, res) {\r",
									"        if(err) {\r",
									"            console.log(\"error: \" + err);\r",
									"        } else {\r",
									"        \r",
									"            var content = res.json()\r",
									"            // console.log(content);\r",
									"\r",
									"            for(let key in content){\r",
									"                // console.log(\"key: \", key);\r",
									"                // console.log(\"value: \",content[key]);\r",
									"                pm.collectionVariables.set(key, content[key]);\r",
									"            };\r",
									"          \r",
									"        }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/team_members/{{team_member_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"team_members",
								"{{team_member_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[PUT] Indirectly Assign Team Member 1 to Project 2 - User 1 - JWT1, Admin Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// -----------[1. Check PUT request to project 2] ------------------------\r",
									"\r",
									"pm.test(\"PUT Request- Response 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"PUT response - project id assigned to team member correctly \", function () {\r",
									"    var put_res_content = pm.response.json();\r",
									"    pm.expect(put_res_content[\"projects\"][\"id\"]).to.eq(pm.environment.get(\"user1_project2_id\"));\r",
									"});\r",
									"pm.test(\"PUT response - project name assigned to team member correctly \", function () {\r",
									"    var put_res_content = pm.response.json();\r",
									"    pm.expect(put_res_content[\"projects\"][\"name\"]).to.eq(pm.environment.get(\"user1_project2_name\"));\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"// -----------[2. Check if Project 2 was updated ] ------------------------\r",
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get('app_url')}` + \"/projects/\" + `${pm.environment.get('user1_project2_id')}`,\r",
									"    method: 'GET',\r",
									"    auth: {\r",
									"        type: \"bearer\",\r",
									"        bearer: [\r",
									"            {\r",
									"                key: \"token\",\r",
									"                value: `${pm.environment.get('jwt1')}`,\r",
									"                type: \"string\"\r",
									"            }\r",
									"        ]\r",
									"    },\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}, function (err, res) {\r",
									"        if(err) {\r",
									"            console.log(\"error: \" + err);\r",
									"        } else {\r",
									"\r",
									"            var content = res.json();\r",
									"            console.log(content);\r",
									"            pm.test(\"project 2 team_members attribute id matches team member 1's id \", function(){\r",
									"                var team_member_list = [];\r",
									"                var team_member_id = pm.environment.get(\"team_member_1\");\r",
									"                console.log(\"teammember id: \", team_member_id);\r",
									"                // team_member_list.push(team_member_element);\r",
									"                for(let index in content[\"team_members\"]){\r",
									"                    team_member_list.push(content[\"team_members\"][index][\"id\"]);\r",
									"                }\r",
									"                console.log(\"team_member_list: \", team_member_list);\r",
									"                pm.expect(team_member_list).to.deep.include(team_member_id);\r",
									"\r",
									"        });\r",
									"        };\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.clear();\r",
									"\r",
									"var request_body = {\r",
									"    \"projects\": {\r",
									"        \"id\": parseInt(`${pm.environment.get('user1_project2_id')}`),\r",
									"        \"name\": \"Building Renovation\"\r",
									"\r",
									"    },\r",
									"    \"join_date\": \"2020-07-05\",\r",
									"    \"name\": \"Bart Simpson\",\r",
									"    \"specialty\": \"Chaos\"\r",
									"};\r",
									"\r",
									"// {\r",
									"//     \"projects\": null,\r",
									"//     \"join_date\": \"2020-07-05\",\r",
									"//     \"name\": \"Bart Simpson\",\r",
									"//     \"specialty\": \"Chaos\",\r",
									"//     \"id\": 5664022732996608,\r",
									"//     \"self\": \"https://127.0.0.1:8000/team_members/5664022732996608\"\r",
									"// }\r",
									"\r",
									"var body_str = JSON.stringify(request_body); // body was defined in the previous step.\r",
									"pm.environment.set('request_body', body_str); // this sets an environment variable with the stringified body\r",
									"// -----------[1. Check if Gist is Starred] ------------------------\r",
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get('app_url')}` + \"/projects/\" + `${pm.environment.get('user1_project2_id')}`,\r",
									"    method: 'GET',\r",
									"    auth: {\r",
									"        type: \"bearer\",\r",
									"        bearer: [\r",
									"            {\r",
									"                key: \"token\",\r",
									"                value: `${pm.environment.get('jwt1')}`,\r",
									"                type: \"string\"\r",
									"            }\r",
									"        ]\r",
									"    },\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}, function (err, res) {\r",
									"        if(err) {\r",
									"            console.log(\"error: \" + err);\r",
									"        } else {\r",
									"        \r",
									"            var content = res.json()\r",
									"\r",
									"        }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/team_members/{{team_member_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"team_members",
								"{{team_member_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[DELETE] Indirectly Remove Team Member 1 - remove Project 2 - User 1 - JWT1, Admin Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// -----------[1. Check PUT request to project 1] ------------------------\r",
									"\r",
									"pm.test(\"Delete Successful - Response 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get('app_url')}` + \"/projects/\" + `${pm.environment.get('user1_project2_id')}`,\r",
									"    method: 'GET',\r",
									"    auth: {\r",
									"        type: \"bearer\",\r",
									"        bearer: [\r",
									"            {\r",
									"                key: \"token\",\r",
									"                value: `${pm.environment.get('jwt1')}`,\r",
									"                type: \"string\"\r",
									"            }\r",
									"        ]\r",
									"    },\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    if (err) {\r",
									"        console.log(\"error: \" + err);\r",
									"    } else {\r",
									"\r",
									"        var content = res.json();\r",
									"        pm.test(\"[Before] Project 2 had team_member 1 as a member\", function () {\r",
									"            var team_members_before = pm.collectionVariables.get(\"team_members\");\r",
									"            var member_list_before = [];\r",
									"            for (let idx in team_members_before) {\r",
									"                member_list_before.push(team_members_before[idx][\"id\"]);\r",
									"            }\r",
									"            var team_member_id = pm.environment.get(\"team_member_1\");\r",
									"            pm.expect(member_list_before).to.deep.include(team_member_id);\r",
									"\r",
									"        })\r",
									"        pm.test(\"project 2 team_members attribute id not contain team member 1's id \", function () {\r",
									"            var team_member_list = [];\r",
									"            var team_member_id = pm.environment.get(\"team_member_1\");\r",
									"            console.log(\"teammember id: \", team_member_id);\r",
									"            // team_member_list.push(team_member_element);\r",
									"            for (let index in content[\"team_members\"]) {\r",
									"                team_member_list.push(content[\"team_members\"][index][\"id\"]);\r",
									"            }\r",
									"            console.log(\"team_member_list: \", team_member_list);\r",
									"            pm.expect(team_member_list).to.not.deep.include(team_member_id);\r",
									"\r",
									"        });\r",
									"    };\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.clear();\r",
									"\r",
									"// var request_body = {\r",
									"//     \"projects\": null\r",
									"// };\r",
									"\r",
									"// var body_str = JSON.stringify(request_body); // body was defined in the previous step.\r",
									"// pm.environment.set('request_body', body_str); // this sets an environment variable with the stringified body\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get('app_url')}` + \"/projects/\" + `${pm.environment.get('user1_project2_id')}`,\r",
									"    method: 'GET',\r",
									"    auth: {\r",
									"        type: \"bearer\",\r",
									"        bearer: [\r",
									"            {\r",
									"                key: \"token\",\r",
									"                value: `${pm.environment.get('jwt1')}`,\r",
									"                type: \"string\"\r",
									"            }\r",
									"        ]\r",
									"    },\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}, function (err, res) {\r",
									"        if(err) {\r",
									"            console.log(\"error: \" + err);\r",
									"        } else {\r",
									"        \r",
									"            var content = res.json()\r",
									"            for(let key in content){\r",
									"                // console.log(\"key: \", key);\r",
									"                // console.log(\"value: \",content[key]);\r",
									"                pm.collectionVariables.set(key, content[key]);\r",
									"            };\r",
									"          \r",
									"        }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/team_members/{{team_member_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"team_members",
								"{{team_member_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "RE-POST team member 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"201 status code\", function () {\r",
									"    //Check for 201 status code\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"team_member_1\",pm.response.json()[\"id\"]);\r",
									"pm.environment.set(\"team_member_incorrect_id\",1);\r",
									"\r",
									"var url = pm.environment.get(\"app_url\");\r",
									"pm.test(\"content is valid\", function () {\r",
									"    let team_member = pm.response.json();\r",
									"    pm.expect(team_member[\"name\"]).to.eq(\"Bart Simpson\");\r",
									"    pm.expect(team_member[\"id\"]).to.exist;\r",
									"    pm.expect(team_member[\"specialty\"]).to.eq(\"Chaos\");\r",
									"    pm.expect(team_member[\"join_date\"]).to.eq(\"2020-07-05\");\r",
									"    var self_url = url + \"/team_members/\" +  team_member[\"id\"];\r",
									"    pm.expect(team_member[\"self\"]).to.eq(self_url);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Bart Simpson\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"specialty\": \"Chaos\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/team_members",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"team_members"
							]
						}
					},
					"response": []
				},
				{
					"name": "[PUT] Indirectly Assign Project 2 to Team Member 1 - User 1 - JWT1, Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// -----------[1. Check PUT request to project 2] ------------------------\r",
									"pm.test(\"PUT Request- Response 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var content = pm.response.json();\r",
									"\r",
									"var members_list = content[\"team_members\"];\r",
									"let project_member_list = [];\r",
									"\r",
									"for(let idx in members_list){\r",
									"    project_member_list.push(members_list[idx][\"id\"]);\r",
									"}\r",
									"\r",
									"pm.test(\"PUT response - team member id assigned to project correctly\", function () {\r",
									"    var put_res_content = pm.response.json();\r",
									"    pm.expect(project_member_list).to.include(pm.environment.get(\"team_member_1\"));\r",
									"});\r",
									"\r",
									"\r",
									"// -----------[2. Check if Team Member 1 was updated ] ------------------------\r",
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get('app_url')}` + \"/team_members/\" + `${pm.environment.get('team_member_1')}`,\r",
									"    method: 'GET',\r",
									"    auth: {\r",
									"        type: \"bearer\",\r",
									"        bearer: [\r",
									"            {\r",
									"                key: \"token\",\r",
									"                value: `${pm.environment.get('jwt1')}`,\r",
									"                type: \"string\"\r",
									"            }\r",
									"        ]\r",
									"    },\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}, function (err, res) {\r",
									"        if(err) {\r",
									"            console.log(\"error: \" + err);\r",
									"        } else {\r",
									"\r",
									"            var content = res.json();\r",
									"            console.log(content);\r",
									"\r",
									"            pm.test(\"team_member 2's projects attribute id matches project 2's id \", function(){\r",
									"                var project_2_id = content[\"projects\"][\"id\"];\r",
									"                pm.expect(project_2_id).to.eql(pm.environment.get(\"user1_project2_id\"));\r",
									"\r",
									"            });\r",
									"\r",
									"            pm.test(\"PUT response - project name assigned to team member correctly \", function () {\r",
									"                var project_2_name = content[\"projects\"][\"name\"];\r",
									"                pm.expect(project_2_name).to.eq(pm.environment.get(\"user1_project2_name\"));\r",
									"            });\r",
									"\r",
									"        };\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.clear();\r",
									"\r",
									"var request_body = {\r",
									"    \"budget\": 100,\r",
									"    \"client\": null,\r",
									"    \"description\": \"Rebuild a building\",\r",
									"    \"end_date\": \"2022-04-07\",\r",
									"    \"name\": \"Building Renovation\",\r",
									"    \"start_date\": \"2020-03-07\",\r",
									"    \"team_members\": [\r",
									"        {\r",
									"            \"id\": parseInt(`${pm.environment.get('team_member_1')}`)\r",
									"        },\r",
									"\r",
									"    ]\r",
									"};\r",
									"\r",
									"var body_str = JSON.stringify(request_body); // body was defined in the previous step.\r",
									"pm.environment.set('request_body', body_str); // this sets an environment variable with the stringified body\r",
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get('app_url')}` + \"/team_members/\" + `${pm.environment.get('team_member_1')}`,\r",
									"    method: 'GET',\r",
									"    auth: {\r",
									"        type: \"bearer\",\r",
									"        bearer: [\r",
									"            {\r",
									"                key: \"token\",\r",
									"                value: `${pm.environment.get('jwt1')}`,\r",
									"                type: \"string\"\r",
									"            }\r",
									"        ]\r",
									"    },\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}, function (err, res) {\r",
									"        if(err) {\r",
									"            console.log(\"error: \" + err);\r",
									"        } else {\r",
									"        \r",
									"            var content = res.json();\r",
									"            var member_project_before = content[\"projects\"];\r",
									"            pm.collectionVariables.set(\"member_project_before\", member_project_before);\r",
									"        }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/projects/{{user1_project2_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects",
								"{{user1_project2_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[PATCH] Indirectly Remove Project 2 from Team Member 1 - User 1 - JWT1, Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// -----------[1. Check PATCH request to project 2] ------------------------\r",
									"pm.test(\"PATCH Request- Response 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"// -----------[2. Check if Team Member 1 was updated ] ------------------------\r",
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get('app_url')}` + \"/team_members/\" + `${pm.environment.get('team_member_1')}`,\r",
									"    method: 'GET',\r",
									"    auth: {\r",
									"        type: \"bearer\",\r",
									"        bearer: [\r",
									"            {\r",
									"                key: \"token\",\r",
									"                value: `${pm.environment.get('jwt1')}`,\r",
									"                type: \"string\"\r",
									"            }\r",
									"        ]\r",
									"    },\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}, function (err, res) {\r",
									"        if(err) {\r",
									"            console.log(\"error: \" + err);\r",
									"        } else {\r",
									"\r",
									"            var content = res.json();\r",
									"            console.log(content);\r",
									"\r",
									"            pm.test(\"team_member 2's projects is null/empty\", function(){\r",
									"                var project_2_id = content[\"projects\"];\r",
									"                pm.expect(project_2_id).to.be.null;\r",
									"            });\r",
									"\r",
									"        };\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.clear();\r",
									"\r",
									"var request_body = {\r",
									"    \"budget\": 100,\r",
									"    \"client\": null,\r",
									"    \"description\": \"Rebuild a building\",\r",
									"    \"end_date\": \"2022-04-07\",\r",
									"    \"name\": \"Building Renovation\",\r",
									"    \"start_date\": \"2020-03-07\",\r",
									"    \"team_members\": []\r",
									"};\r",
									"\r",
									"var body_str = JSON.stringify(request_body); // body was defined in the previous step.\r",
									"pm.environment.set('request_body', body_str); // this sets an environment variable with the stringified body\r",
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get('app_url')}` + \"/team_members/\" + `${pm.environment.get('team_member_1')}`,\r",
									"    method: 'GET',\r",
									"    auth: {\r",
									"        type: \"bearer\",\r",
									"        bearer: [\r",
									"            {\r",
									"                key: \"token\",\r",
									"                value: `${pm.environment.get('jwt1')}`,\r",
									"                type: \"string\"\r",
									"            }\r",
									"        ]\r",
									"    },\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}, function (err, res) {\r",
									"        if(err) {\r",
									"            console.log(\"error: \" + err);\r",
									"        } else {\r",
									"        \r",
									"            var content = res.json();\r",
									"            var member_project_before = content[\"projects\"];\r",
									"            pm.collectionVariables.set(\"member_project_before\", member_project_before);\r",
									"        }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/projects/{{user1_project2_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects",
								"{{user1_project2_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[PUT] Indirectly Assign Project 2 to Team Member 1 - User 1 - JWT1, Admin 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// -----------[1. Check PUT request to project 2] ------------------------\r",
									"pm.test(\"PUT Request- Response 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var content = pm.response.json();\r",
									"\r",
									"var members_list = content[\"team_members\"];\r",
									"let project_member_list = [];\r",
									"\r",
									"for(let idx in members_list){\r",
									"    project_member_list.push(members_list[idx][\"id\"]);\r",
									"}\r",
									"\r",
									"pm.test(\"PUT response - team member id assigned to project correctly\", function () {\r",
									"    var put_res_content = pm.response.json();\r",
									"    pm.expect(project_member_list).to.include(pm.environment.get(\"team_member_1\"));\r",
									"});\r",
									"\r",
									"\r",
									"// -----------[2. Check if Team Member 1 was updated ] ------------------------\r",
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get('app_url')}` + \"/team_members/\" + `${pm.environment.get('team_member_1')}`,\r",
									"    method: 'GET',\r",
									"    auth: {\r",
									"        type: \"bearer\",\r",
									"        bearer: [\r",
									"            {\r",
									"                key: \"token\",\r",
									"                value: `${pm.environment.get('jwt1')}`,\r",
									"                type: \"string\"\r",
									"            }\r",
									"        ]\r",
									"    },\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}, function (err, res) {\r",
									"        if(err) {\r",
									"            console.log(\"error: \" + err);\r",
									"        } else {\r",
									"\r",
									"            var content = res.json();\r",
									"            console.log(content);\r",
									"\r",
									"            pm.test(\"team_member 2's projects attribute id matches project 2's id \", function(){\r",
									"                var project_2_id = content[\"projects\"][\"id\"];\r",
									"                pm.expect(project_2_id).to.eql(pm.environment.get(\"user1_project2_id\"));\r",
									"\r",
									"            });\r",
									"\r",
									"            pm.test(\"PUT response - project name assigned to team member correctly \", function () {\r",
									"                var project_2_name = content[\"projects\"][\"name\"];\r",
									"                pm.expect(project_2_name).to.eq(pm.environment.get(\"user1_project2_name\"));\r",
									"            });\r",
									"\r",
									"        };\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.clear();\r",
									"\r",
									"var request_body = {\r",
									"    \"budget\": 100,\r",
									"    \"client\": null,\r",
									"    \"description\": \"Rebuild a building\",\r",
									"    \"end_date\": \"2022-04-07\",\r",
									"    \"name\": \"Building Renovation\",\r",
									"    \"start_date\": \"2020-03-07\",\r",
									"    \"team_members\": [\r",
									"        {\r",
									"            \"id\": parseInt(`${pm.environment.get('team_member_1')}`)\r",
									"        },\r",
									"\r",
									"    ]\r",
									"};\r",
									"\r",
									"var body_str = JSON.stringify(request_body); // body was defined in the previous step.\r",
									"pm.environment.set('request_body', body_str); // this sets an environment variable with the stringified body\r",
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get('app_url')}` + \"/team_members/\" + `${pm.environment.get('team_member_1')}`,\r",
									"    method: 'GET',\r",
									"    auth: {\r",
									"        type: \"bearer\",\r",
									"        bearer: [\r",
									"            {\r",
									"                key: \"token\",\r",
									"                value: `${pm.environment.get('jwt1')}`,\r",
									"                type: \"string\"\r",
									"            }\r",
									"        ]\r",
									"    },\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}, function (err, res) {\r",
									"        if(err) {\r",
									"            console.log(\"error: \" + err);\r",
									"        } else {\r",
									"        \r",
									"            var content = res.json();\r",
									"            var member_project_before = content[\"projects\"];\r",
									"            pm.collectionVariables.set(\"member_project_before\", member_project_before);\r",
									"        }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/projects/{{user1_project2_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects",
								"{{user1_project2_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[DELETE] Indirectly Remove Project 2 from Team Member 1 - User 1 - JWT1, Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// -----------[1. Check DELETE request to project 2] ------------------------\r",
									"pm.test(\"DELETE Request- Response 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"// -----------[2. Check if Team Member 1 was updated ] ------------------------\r",
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get('app_url')}` + \"/team_members/\" + `${pm.environment.get('team_member_1')}`,\r",
									"    method: 'GET',\r",
									"    auth: {\r",
									"        type: \"bearer\",\r",
									"        bearer: [\r",
									"            {\r",
									"                key: \"token\",\r",
									"                value: `${pm.environment.get('jwt1')}`,\r",
									"                type: \"string\"\r",
									"            }\r",
									"        ]\r",
									"    },\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}, function (err, res) {\r",
									"        if(err) {\r",
									"            console.log(\"error: \" + err);\r",
									"        } else {\r",
									"\r",
									"            var content = res.json();\r",
									"            console.log(content);\r",
									"            var member_project_before = pm.collectionVariables.get(\"member_project_before\");\r",
									"\r",
									"            pm.test(\"team_member 2's projects is null/empty\", function(){\r",
									"                var project_2_id = content[\"projects\"];\r",
									"                pm.expect(member_project_before).to.not.eql(project_2_id);\r",
									"            });\r",
									"\r",
									"            pm.test(\"team_member 2's projects is null/empty\", function(){\r",
									"                var project_2_id = content[\"projects\"];\r",
									"                pm.expect(project_2_id).to.be.null;\r",
									"            });\r",
									"\r",
									"        };\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.clear();\r",
									"\r",
									"// var request_body = {\r",
									"//     \"budget\": 100,\r",
									"//     \"client\": null,\r",
									"//     \"description\": \"Rebuild a building\",\r",
									"//     \"end_date\": \"2022-04-07\",\r",
									"//     \"name\": \"Building Renovation\",\r",
									"//     \"start_date\": \"2020-03-07\",\r",
									"//     \"team_members\": []\r",
									"// };\r",
									"\r",
									"// var body_str = JSON.stringify(request_body); // body was defined in the previous step.\r",
									"// pm.environment.set('request_body', body_str); // this sets an environment variable with the stringified body\r",
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get('app_url')}` + \"/team_members/\" + `${pm.environment.get('team_member_1')}`,\r",
									"    method: 'GET',\r",
									"    auth: {\r",
									"        type: \"bearer\",\r",
									"        bearer: [\r",
									"            {\r",
									"                key: \"token\",\r",
									"                value: `${pm.environment.get('jwt1')}`,\r",
									"                type: \"string\"\r",
									"            }\r",
									"        ]\r",
									"    },\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}, function (err, res) {\r",
									"        if(err) {\r",
									"            console.log(\"error: \" + err);\r",
									"        } else {\r",
									"        \r",
									"            var content = res.json();\r",
									"            var member_project_before = content[\"projects\"];\r",
									"            pm.collectionVariables.set(\"member_project_before\", member_project_before);\r",
									"        }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/projects/{{user1_project2_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects",
								"{{user1_project2_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "RE-POST project 2- User 1 - JWT1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"201 status code\", function () {\r",
									"    //Check for 201 status code\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"user1_project2_id\",pm.response.json()[\"id\"]);\r",
									"pm.environment.set(\"user1_project2_name\",pm.response.json()[\"name\"]);\r",
									"\r",
									"let project_owner_id = pm.environment.get(\"user_id1\");\r",
									"console.log(\"project_owner_id: \", project_owner_id);\r",
									"\r",
									"pm.test(\"content is valid\", function () {\r",
									"    let project = pm.response.json();\r",
									"    pm.expect(project[\"name\"]).to.eq(pm.collectionVariables.get(\"name\"));\r",
									"    pm.expect(project[\"project_owner\"]).to.eq(project_owner_id);\r",
									"    pm.expect(project[\"budget\"]).to.eq(pm.collectionVariables.get(\"budget\"));\r",
									"    pm.expect(project[\"description\"]).to.eq(pm.collectionVariables.get(\"description\"));\r",
									"    pm.expect(project[\"start_date\"]).to.eq(pm.collectionVariables.get(\"start_date\"));\r",
									"    pm.expect(project[\"end_date\"]).to.eq(pm.collectionVariables.get(\"end_date\"));\r",
									"    \r",
									"\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.clear();\r",
									"\r",
									"var name = \"Building Renovation\";\r",
									"var budget = 100;\r",
									"var description = \"Rebuild a building\" ;\r",
									"var start_date = \"2020-03-07\" ;\r",
									"var end_date = \"2022-04-07\";\r",
									"\r",
									"\r",
									"var req_body_test = JSON.stringify({\r",
									"    name: name,\r",
									"    budget: budget,\r",
									"    description: description,\r",
									"    start_date: start_date,\r",
									"    end_date: end_date\r",
									"    \r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"name\", name);\r",
									"pm.collectionVariables.set(\"budget\", budget);\r",
									"pm.collectionVariables.set(\"description\", description);\r",
									"pm.collectionVariables.set(\"start_date\", start_date);\r",
									"pm.collectionVariables.set(\"end_date\", end_date);\r",
									"\r",
									"pm.environment.set(\"req_body_test\", req_body_test);\r",
									"console.log(req_body_test);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{req_body_test}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/projects",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Indirect Projects-Clients",
			"item": [
				{
					"name": "[PUT] Indirectly Assign Client 1  Project 2  - User 1 - JWT1, Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// -----------[1. Check PUT request to client 1] ------------------------\r",
									"\r",
									"pm.test(\"PUT Request- Response 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"PUT response - project id assigned to client correctly \", function () {\r",
									"    var put_res_content = pm.response.json();\r",
									"    pm.expect(put_res_content[\"projects\"][\"id\"]).to.eq(pm.environment.get(\"user1_project2_id\"));\r",
									"});\r",
									"pm.test(\"PUT response - project name assigned to client correctly \", function () {\r",
									"    var put_res_content = pm.response.json();\r",
									"    pm.expect(put_res_content[\"projects\"][\"name\"]).to.eq(pm.environment.get(\"user1_project2_name\"));\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"// -----------[2. Check if Project 2 was updated ] ------------------------\r",
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get('app_url')}` + \"/projects/\" + `${pm.environment.get('user1_project2_id')}`,\r",
									"    method: 'GET',\r",
									"    auth: {\r",
									"        type: \"bearer\",\r",
									"        bearer: [\r",
									"            {\r",
									"                key: \"token\",\r",
									"                value: `${pm.environment.get('jwt1')}`,\r",
									"                type: \"string\"\r",
									"            }\r",
									"        ]\r",
									"    },\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}, function (err, res) {\r",
									"        if(err) {\r",
									"            console.log(\"error: \" + err);\r",
									"        } else {\r",
									"\r",
									"            var content = res.json();\r",
									"            console.log(content);\r",
									"            pm.test(\"project 2 client attribute id matches client 1's id \", function(){\r",
									"\r",
									"                pm.expect(content[\"client\"][\"id\"]).to.eq(pm.environment.get(\"client_1\"));\r",
									"\r",
									"        });\r",
									"        };\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.clear();\r",
									"\r",
									"var request_body = {\r",
									"    \"projects\": {\r",
									"        \"id\": parseInt(`${pm.environment.get('user1_project2_id')}`),\r",
									"        \"name\": \"Building Renovation\"\r",
									"\r",
									"    },\r",
									"    \"join_date\": \"2020-07-05\",\r",
									"    \"name\": \"The Simpsons Company\",\r",
									"    \"industry\": \"Financials\"\r",
									"};\r",
									"\r",
									"var body_str = JSON.stringify(request_body); // body was defined in the previous step.\r",
									"pm.environment.set('request_body', body_str); // this sets an environment variable with the stringified body\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get('app_url')}` + \"/projects/\" + `${pm.environment.get('user1_project2_id')}`,\r",
									"    method: 'GET',\r",
									"    auth: {\r",
									"        type: \"bearer\",\r",
									"        bearer: [\r",
									"            {\r",
									"                key: \"token\",\r",
									"                value: `${pm.environment.get('jwt1')}`,\r",
									"                type: \"string\"\r",
									"            }\r",
									"        ]\r",
									"    },\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}, function (err, res) {\r",
									"        if(err) {\r",
									"            console.log(\"error: \" + err);\r",
									"        } else {\r",
									"        \r",
									"            var content = res.json()\r",
									"\r",
									"        }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/clients/{{client_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"clients",
								"{{client_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[PATCH] Indirectly Remove Client 1 from Project 2 - User 1 - JWT1, Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// -----------[1. Check PATCH request to client 1] ------------------------\r",
									"\r",
									"pm.test(\"PATCH Request- Response 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get('app_url')}` + \"/projects/\" + `${pm.environment.get('user1_project2_id')}`,\r",
									"    method: 'GET',\r",
									"    auth: {\r",
									"        type: \"bearer\",\r",
									"        bearer: [\r",
									"            {\r",
									"                key: \"token\",\r",
									"                value: `${pm.environment.get('jwt1')}`,\r",
									"                type: \"string\"\r",
									"            }\r",
									"        ]\r",
									"    },\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}, function (err, res) {\r",
									"        if(err) {\r",
									"            console.log(\"error: \" + err);\r",
									"        } else {\r",
									"\r",
									"            var content = res.json();\r",
									"            console.log(content);\r",
									"            pm.test(\"PATCH Side Effect - Project 2's client attribute - client 1 removed\", function(){\r",
									"                pm.expect(content[\"client\"]).to.be.eq(null);\r",
									"\r",
									"        });\r",
									"        };\r",
									"});\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get('app_url')}` + \"/clients/\" + `${pm.environment.get('client_1')}`,\r",
									"    method: 'GET',\r",
									"    auth: {\r",
									"        type: \"bearer\",\r",
									"        bearer: [\r",
									"            {\r",
									"                key: \"token\",\r",
									"                value: `${pm.environment.get('jwt1')}`,\r",
									"                type: \"string\"\r",
									"            }\r",
									"        ]\r",
									"    },\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}, function (err2, res2) {\r",
									"        if(err2) {\r",
									"            console.log(\"error: \" + err2);\r",
									"        } else {\r",
									"\r",
									"            var content2 = res2.json();\r",
									"            console.log(content2);                \r",
									"            pm.test(\"PATCH Result - Client 1 entity's project attribute - project 2's id and name removed correctly \", function () {\r",
									"\r",
									"                pm.expect(content2[\"projects\"]).to.eq(null);\r",
									"            });\r",
									"        };\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.clear();\r",
									"\r",
									"var request_body = {\r",
									"    \"projects\": null\r",
									"};\r",
									"\r",
									"var body_str = JSON.stringify(request_body); // body was defined in the previous step.\r",
									"pm.environment.set('request_body', body_str); // this sets an environment variable with the stringified body\r",
									"// -----------[1. Check if Gist is Starred] ------------------------\r",
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get('app_url')}` + \"/projects/\" + `${pm.environment.get('user1_project2_id')}`,\r",
									"    method: 'GET',\r",
									"    auth: {\r",
									"        type: \"bearer\",\r",
									"        bearer: [\r",
									"            {\r",
									"                key: \"token\",\r",
									"                value: `${pm.environment.get('jwt1')}`,\r",
									"                type: \"string\"\r",
									"            }\r",
									"        ]\r",
									"    },\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}, function (err, res) {\r",
									"        if(err) {\r",
									"            console.log(\"error: \" + err);\r",
									"        } else {\r",
									"        \r",
									"            var content = res.json()\r",
									"            // console.log(content);\r",
									"\r",
									"            for(let key in content){\r",
									"                // console.log(\"key: \", key);\r",
									"                // console.log(\"value: \",content[key]);\r",
									"                pm.collectionVariables.set(key, content[key]);\r",
									"            };\r",
									"          \r",
									"        }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/clients/{{client_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"clients",
								"{{client_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[PUT] Indirectly Assign Client 1  Project 2  - User 1 - JWT1, Admin 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// -----------[1. Check PUT request to client 1] ------------------------\r",
									"\r",
									"pm.test(\"PUT Request- Response 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"PUT response - project id assigned to client correctly \", function () {\r",
									"    var put_res_content = pm.response.json();\r",
									"    pm.expect(put_res_content[\"projects\"][\"id\"]).to.eq(pm.environment.get(\"user1_project2_id\"));\r",
									"});\r",
									"pm.test(\"PUT response - project name assigned to client correctly \", function () {\r",
									"    var put_res_content = pm.response.json();\r",
									"    pm.expect(put_res_content[\"projects\"][\"name\"]).to.eq(pm.environment.get(\"user1_project2_name\"));\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"// -----------[2. Check if Project 2 was updated ] ------------------------\r",
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get('app_url')}` + \"/projects/\" + `${pm.environment.get('user1_project2_id')}`,\r",
									"    method: 'GET',\r",
									"    auth: {\r",
									"        type: \"bearer\",\r",
									"        bearer: [\r",
									"            {\r",
									"                key: \"token\",\r",
									"                value: `${pm.environment.get('jwt1')}`,\r",
									"                type: \"string\"\r",
									"            }\r",
									"        ]\r",
									"    },\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}, function (err, res) {\r",
									"        if(err) {\r",
									"            console.log(\"error: \" + err);\r",
									"        } else {\r",
									"\r",
									"            var content = res.json();\r",
									"            console.log(content);\r",
									"            pm.test(\"project 2 client attribute id matches client 1's id \", function(){\r",
									"\r",
									"                pm.expect(content[\"client\"][\"id\"]).to.eq(pm.environment.get(\"client_1\"));\r",
									"\r",
									"        });\r",
									"        };\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.clear();\r",
									"\r",
									"var request_body = {\r",
									"    \"projects\": {\r",
									"        \"id\": parseInt(`${pm.environment.get('user1_project2_id')}`),\r",
									"        \"name\": \"Building Renovation\"\r",
									"\r",
									"    },\r",
									"    \"join_date\": \"2020-07-05\",\r",
									"    \"name\": \"The Simpsons Company\",\r",
									"    \"industry\": \"Financials\"\r",
									"};\r",
									"\r",
									"var body_str = JSON.stringify(request_body); // body was defined in the previous step.\r",
									"pm.environment.set('request_body', body_str); // this sets an environment variable with the stringified body\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get('app_url')}` + \"/projects/\" + `${pm.environment.get('user1_project2_id')}`,\r",
									"    method: 'GET',\r",
									"    auth: {\r",
									"        type: \"bearer\",\r",
									"        bearer: [\r",
									"            {\r",
									"                key: \"token\",\r",
									"                value: `${pm.environment.get('jwt1')}`,\r",
									"                type: \"string\"\r",
									"            }\r",
									"        ]\r",
									"    },\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}, function (err, res) {\r",
									"        if(err) {\r",
									"            console.log(\"error: \" + err);\r",
									"        } else {\r",
									"        \r",
									"            var content = res.json()\r",
									"\r",
									"        }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/clients/{{client_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"clients",
								"{{client_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[DELETE] Indirectly Remove Client 1 from Project 2 - User 1 - JWT1, Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// -----------[1. Check DELETE request to client 1] ------------------------\r",
									"\r",
									"pm.test(\"DELETE Request- Response 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get('app_url')}` + \"/projects/\" + `${pm.environment.get('user1_project2_id')}`,\r",
									"    method: 'GET',\r",
									"    auth: {\r",
									"        type: \"bearer\",\r",
									"        bearer: [\r",
									"            {\r",
									"                key: \"token\",\r",
									"                value: `${pm.environment.get('jwt1')}`,\r",
									"                type: \"string\"\r",
									"            }\r",
									"        ]\r",
									"    },\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}, function (err, res) {\r",
									"        if(err) {\r",
									"            console.log(\"error: \" + err);\r",
									"        } else {\r",
									"\r",
									"            var content = res.json();\r",
									"            console.log(content);\r",
									"            pm.test(\"DELETE Side Effect - Project 2's client attribute - client 1 removed\", function(){\r",
									"                pm.expect(content[\"client\"]).to.be.eq(null);\r",
									"\r",
									"        });\r",
									"        };\r",
									"});\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get('app_url')}` + \"/clients/\" + `${pm.environment.get('client_1')}`,\r",
									"    method: 'GET',\r",
									"    auth: {\r",
									"        type: \"bearer\",\r",
									"        bearer: [\r",
									"            {\r",
									"                key: \"token\",\r",
									"                value: `${pm.environment.get('jwt1')}`,\r",
									"                type: \"string\"\r",
									"            }\r",
									"        ]\r",
									"    },\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}, function (err2, res2) {\r",
									"        if(err2) {\r",
									"            console.log(\"error: \" + err2);\r",
									"        } else {\r",
									"            var content = res2.json();\r",
									"            console.log(content);\r",
									"            console.log(res2);\r",
									"            pm.test(\"DELETE Result - Client 1 entity successfully deleted and not found (404)\", function () {\r",
									"                pm.expect(res2.code).to.eql(404);\r",
									"            });\r",
									"        };\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.clear();\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get('app_url')}` + \"/projects/\" + `${pm.environment.get('user1_project2_id')}`,\r",
									"    method: 'GET',\r",
									"    auth: {\r",
									"        type: \"bearer\",\r",
									"        bearer: [\r",
									"            {\r",
									"                key: \"token\",\r",
									"                value: `${pm.environment.get('jwt1')}`,\r",
									"                type: \"string\"\r",
									"            }\r",
									"        ]\r",
									"    },\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}, function (err, res) {\r",
									"        if(err) {\r",
									"            console.log(\"error: \" + err);\r",
									"        } else {\r",
									"        \r",
									"            var content = res.json()\r",
									"            // console.log(content);\r",
									"\r",
									"            for(let key in content){\r",
									"                // console.log(\"key: \", key);\r",
									"                // console.log(\"value: \",content[key]);\r",
									"                pm.collectionVariables.set(key, content[key]);\r",
									"            };\r",
									"          \r",
									"        }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/clients/{{client_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"clients",
								"{{client_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "RE-POST client 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"201 status code\", function () {\r",
									"    //Check for 201 status code\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"client_1\",pm.response.json()[\"id\"]);\r",
									"pm.environment.set(\"client_id_incorrect\",1);\r",
									"\r",
									"var url = pm.environment.get(\"app_url\");\r",
									"pm.test(\"content is valid\", function () {\r",
									"    let client = pm.response.json();\r",
									"    pm.expect(client[\"name\"]).to.eq(\"The Simpsons Company\");\r",
									"    pm.expect(client[\"id\"]).to.exist;\r",
									"    pm.expect(client[\"industry\"]).to.eq(\"Financials\");\r",
									"    pm.expect(client[\"join_date\"]).to.eq(\"2020-07-05\");\r",
									"    var self_url = url + \"/clients/\" +  client[\"id\"];\r",
									"    pm.expect(client[\"self\"]).to.eq(self_url);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"The Simpsons Company\",\r\n    \"join_date\": \"2020-07-05\",\r\n    \"industry\": \"Financials\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/clients",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"clients"
							]
						}
					},
					"response": []
				},
				{
					"name": "[PUT] Indirectly Assign Project 2 to Client 1 - User 1 - JWT1, Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// -----------[1. Check PUT request to project 2] ------------------------\r",
									"pm.test(\"PUT Request- Response 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var content = pm.response.json();\r",
									"var project_client = content[\"client\"];\r",
									"\r",
									"pm.test(\"PUT response - client id assigned to project correctly\", function () {\r",
									"    pm.expect(project_client[\"id\"]).to.eql(pm.environment.get(\"client_1\"));\r",
									"});\r",
									"\r",
									"\r",
									"// -----------[2. Check if Client 1 was updated ] ------------------------\r",
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get('app_url')}` + \"/clients/\" + `${pm.environment.get('client_1')}`,\r",
									"    method: 'GET',\r",
									"    auth: {\r",
									"        type: \"bearer\",\r",
									"        bearer: [\r",
									"            {\r",
									"                key: \"token\",\r",
									"                value: `${pm.environment.get('jwt1')}`,\r",
									"                type: \"string\"\r",
									"            }\r",
									"        ]\r",
									"    },\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}, function (err, res) {\r",
									"        if(err) {\r",
									"            console.log(\"error: \" + err);\r",
									"        } else {\r",
									"\r",
									"            var content = res.json();\r",
									"            console.log(content);\r",
									"\r",
									"            pm.test(\"client 1's projects attribute id matches project 2's id \", function(){\r",
									"                var project_2_id = content[\"projects\"][\"id\"];\r",
									"                pm.expect(project_2_id).to.eql(pm.environment.get(\"user1_project2_id\"));\r",
									"\r",
									"            });\r",
									"\r",
									"            pm.test(\"PUT response - project name assigned to client correctly \", function () {\r",
									"                var project_2_name = content[\"projects\"][\"name\"];\r",
									"                pm.expect(project_2_name).to.eq(pm.environment.get(\"user1_project2_name\"));\r",
									"            });\r",
									"\r",
									"        };\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.clear();\r",
									"\r",
									"var request_body = {\r",
									"    \"budget\": 100,\r",
									"    \"client\": {\r",
									"        \"id\": parseInt(`${pm.environment.get('client_1')}`)\r",
									"    },\r",
									"    \"description\": \"Rebuild a building\",\r",
									"    \"end_date\": \"2022-04-07\",\r",
									"    \"name\": \"Building Renovation\",\r",
									"    \"start_date\": \"2020-03-07\",\r",
									"    \"team_members\": []\r",
									"};\r",
									"\r",
									"var body_str = JSON.stringify(request_body); // body was defined in the previous step.\r",
									"pm.environment.set('request_body', body_str); // this sets an environment variable with the stringified body\r",
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get('app_url')}` + \"/clients/\" + `${pm.environment.get('client_1')}`,\r",
									"    method: 'GET',\r",
									"    auth: {\r",
									"        type: \"bearer\",\r",
									"        bearer: [\r",
									"            {\r",
									"                key: \"token\",\r",
									"                value: `${pm.environment.get('jwt1')}`,\r",
									"                type: \"string\"\r",
									"            }\r",
									"        ]\r",
									"    },\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}, function (err, res) {\r",
									"        if(err) {\r",
									"            console.log(\"error: \" + err);\r",
									"        } else {\r",
									"        \r",
									"            var content = res.json();\r",
									"            var client_project_before = content[\"projects\"];\r",
									"            pm.collectionVariables.set(\"client_project_before\", client_project_before);\r",
									"        }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/projects/{{user1_project2_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects",
								"{{user1_project2_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[PATCH] Indirectly Remove Project 2 from Client 1 - User 1 - JWT1, Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// -----------[1. Check PATCH request to project 2] ------------------------\r",
									"pm.test(\"PATCH Request- Response 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"// -----------[2. Check if Client 1 was updated ] ------------------------\r",
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get('app_url')}` + \"/clients/\" + `${pm.environment.get('client_1')}`,\r",
									"    method: 'GET',\r",
									"    auth: {\r",
									"        type: \"bearer\",\r",
									"        bearer: [\r",
									"            {\r",
									"                key: \"token\",\r",
									"                value: `${pm.environment.get('jwt1')}`,\r",
									"                type: \"string\"\r",
									"            }\r",
									"        ]\r",
									"    },\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}, function (err, res) {\r",
									"        if(err) {\r",
									"            console.log(\"error: \" + err);\r",
									"        } else {\r",
									"\r",
									"            var content = res.json();\r",
									"            console.log(content);\r",
									"\r",
									"            pm.test(\"client 1's projects is null/empty\", function(){\r",
									"                var project_2_id = content[\"projects\"];\r",
									"                pm.expect(project_2_id).to.be.null;\r",
									"            });\r",
									"\r",
									"        };\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.clear();\r",
									"\r",
									"var request_body = {\r",
									"    \"budget\": 100,\r",
									"    \"client\": null,\r",
									"    \"description\": \"Rebuild a building\",\r",
									"    \"end_date\": \"2022-04-07\",\r",
									"    \"name\": \"Building Renovation\",\r",
									"    \"start_date\": \"2020-03-07\",\r",
									"    \"team_members\": []\r",
									"};\r",
									"\r",
									"var body_str = JSON.stringify(request_body); // body was defined in the previous step.\r",
									"pm.environment.set('request_body', body_str); // this sets an environment variable with the stringified body\r",
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get('app_url')}` + \"/clients/\" + `${pm.environment.get('client_1')}`,\r",
									"    method: 'GET',\r",
									"    auth: {\r",
									"        type: \"bearer\",\r",
									"        bearer: [\r",
									"            {\r",
									"                key: \"token\",\r",
									"                value: `${pm.environment.get('jwt1')}`,\r",
									"                type: \"string\"\r",
									"            }\r",
									"        ]\r",
									"    },\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}, function (err, res) {\r",
									"        if(err) {\r",
									"            console.log(\"error: \" + err);\r",
									"        } else {\r",
									"        \r",
									"            var content = res.json();\r",
									"            var client_project_before = content[\"projects\"];\r",
									"            pm.collectionVariables.set(\"client_project_before\", client_project_before);\r",
									"        }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/projects/{{user1_project2_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects",
								"{{user1_project2_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[PUT] Indirectly Assign Project 2 to Client 1 - User 1 - JWT1, Admin 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// -----------[1. Check PUT request to project 2] ------------------------\r",
									"pm.test(\"PUT Request- Response 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var content = pm.response.json();\r",
									"var project_client = content[\"client\"];\r",
									"\r",
									"pm.test(\"PUT response - client id assigned to project correctly\", function () {\r",
									"    pm.expect(project_client[\"id\"]).to.eql(pm.environment.get(\"client_1\"));\r",
									"});\r",
									"\r",
									"\r",
									"// -----------[2. Check if Client 1 was updated ] ------------------------\r",
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get('app_url')}` + \"/clients/\" + `${pm.environment.get('client_1')}`,\r",
									"    method: 'GET',\r",
									"    auth: {\r",
									"        type: \"bearer\",\r",
									"        bearer: [\r",
									"            {\r",
									"                key: \"token\",\r",
									"                value: `${pm.environment.get('jwt1')}`,\r",
									"                type: \"string\"\r",
									"            }\r",
									"        ]\r",
									"    },\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}, function (err, res) {\r",
									"        if(err) {\r",
									"            console.log(\"error: \" + err);\r",
									"        } else {\r",
									"\r",
									"            var content = res.json();\r",
									"            console.log(content);\r",
									"\r",
									"            pm.test(\"client 1's projects attribute id matches project 2's id \", function(){\r",
									"                var project_2_id = content[\"projects\"][\"id\"];\r",
									"                pm.expect(project_2_id).to.eql(pm.environment.get(\"user1_project2_id\"));\r",
									"\r",
									"            });\r",
									"\r",
									"            pm.test(\"PUT response - project name assigned to client correctly \", function () {\r",
									"                var project_2_name = content[\"projects\"][\"name\"];\r",
									"                pm.expect(project_2_name).to.eq(pm.environment.get(\"user1_project2_name\"));\r",
									"            });\r",
									"\r",
									"        };\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.clear();\r",
									"\r",
									"var request_body = {\r",
									"    \"budget\": 100,\r",
									"    \"client\": {\r",
									"        \"id\": parseInt(`${pm.environment.get('client_1')}`)\r",
									"    },\r",
									"    \"description\": \"Rebuild a building\",\r",
									"    \"end_date\": \"2022-04-07\",\r",
									"    \"name\": \"Building Renovation\",\r",
									"    \"start_date\": \"2020-03-07\",\r",
									"    \"team_members\": []\r",
									"};\r",
									"\r",
									"var body_str = JSON.stringify(request_body); // body was defined in the previous step.\r",
									"pm.environment.set('request_body', body_str); // this sets an environment variable with the stringified body\r",
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get('app_url')}` + \"/clients/\" + `${pm.environment.get('client_1')}`,\r",
									"    method: 'GET',\r",
									"    auth: {\r",
									"        type: \"bearer\",\r",
									"        bearer: [\r",
									"            {\r",
									"                key: \"token\",\r",
									"                value: `${pm.environment.get('jwt1')}`,\r",
									"                type: \"string\"\r",
									"            }\r",
									"        ]\r",
									"    },\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}, function (err, res) {\r",
									"        if(err) {\r",
									"            console.log(\"error: \" + err);\r",
									"        } else {\r",
									"        \r",
									"            var content = res.json();\r",
									"            var client_project_before = content[\"projects\"];\r",
									"            pm.collectionVariables.set(\"client_project_before\", client_project_before);\r",
									"        }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/projects/{{user1_project2_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects",
								"{{user1_project2_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[DELETE] Indirectly Remove Project 2 from Client 1 - User 1 - JWT1, Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// -----------[1. Check DELETE request to project 2] ------------------------\r",
									"pm.test(\"DELETE Request- Response 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"// -----------[2. Check if Client 1 was updated ] ------------------------\r",
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get('app_url')}` + \"/clients/\" + `${pm.environment.get('client_1')}`,\r",
									"    method: 'GET',\r",
									"    auth: {\r",
									"        type: \"bearer\",\r",
									"        bearer: [\r",
									"            {\r",
									"                key: \"token\",\r",
									"                value: `${pm.environment.get('jwt1')}`,\r",
									"                type: \"string\"\r",
									"            }\r",
									"        ]\r",
									"    },\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}, function (err, res) {\r",
									"        if(err) {\r",
									"            console.log(\"error: \" + err);3\r",
									"        } else {\r",
									"\r",
									"            var content = res.json();\r",
									"            console.log(content);\r",
									"            var client_project_before = pm.collectionVariables.get(\"client_project_before\");\r",
									"\r",
									"            pm.test(\"Client 1's projects before does not equal Client 1's  projects after\", function(){\r",
									"                var project_2_id = content[\"projects\"];\r",
									"                pm.expect(client_project_before).to.not.eql(project_2_id);\r",
									"            });\r",
									"\r",
									"            pm.test(\"Client 1's projects is null/empty\", function(){\r",
									"                var project_2_id = content[\"projects\"];\r",
									"                pm.expect(project_2_id).to.be.null;\r",
									"            });\r",
									"\r",
									"        };\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.clear();\r",
									"\r",
									"// var request_body = {\r",
									"//     \"budget\": 100,\r",
									"//     \"client\": null,\r",
									"//     \"description\": \"Rebuild a building\",\r",
									"//     \"end_date\": \"2022-04-07\",\r",
									"//     \"name\": \"Building Renovation\",\r",
									"//     \"start_date\": \"2020-03-07\",\r",
									"//     \"team_members\": []\r",
									"// };\r",
									"\r",
									"// var body_str = JSON.stringify(request_body); // body was defined in the previous step.\r",
									"// pm.environment.set('request_body', body_str); // this sets an environment variable with the stringified body\r",
									"pm.sendRequest({\r",
									"    url: `${pm.environment.get('app_url')}` + \"/clients/\" + `${pm.environment.get('client_1')}`,\r",
									"    method: 'GET',\r",
									"    auth: {\r",
									"        type: \"bearer\",\r",
									"        bearer: [\r",
									"            {\r",
									"                key: \"token\",\r",
									"                value: `${pm.environment.get('jwt1')}`,\r",
									"                type: \"string\"\r",
									"            }\r",
									"        ]\r",
									"    },\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}, function (err, res) {\r",
									"        if(err) {\r",
									"            console.log(\"error: \" + err);\r",
									"        } else {\r",
									"        \r",
									"            var content = res.json();\r",
									"            var client_project_before = content[\"projects\"];\r",
									"            pm.collectionVariables.set(\"client_project_before\", client_project_before);\r",
									"        }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/projects/{{user1_project2_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects",
								"{{user1_project2_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "RE-POST project 2- User 1 - JWT1 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"201 status code\", function () {\r",
									"    //Check for 201 status code\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"user1_project2_id\",pm.response.json()[\"id\"]);\r",
									"pm.environment.set(\"user1_project2_name\",pm.response.json()[\"name\"]);\r",
									"\r",
									"let project_owner_id = pm.environment.get(\"user_id1\");\r",
									"console.log(\"project_owner_id: \", project_owner_id);\r",
									"\r",
									"pm.test(\"content is valid\", function () {\r",
									"    let project = pm.response.json();\r",
									"    pm.expect(project[\"name\"]).to.eq(pm.collectionVariables.get(\"name\"));\r",
									"    pm.expect(project[\"project_owner\"]).to.eq(project_owner_id);\r",
									"    pm.expect(project[\"budget\"]).to.eq(pm.collectionVariables.get(\"budget\"));\r",
									"    pm.expect(project[\"description\"]).to.eq(pm.collectionVariables.get(\"description\"));\r",
									"    pm.expect(project[\"start_date\"]).to.eq(pm.collectionVariables.get(\"start_date\"));\r",
									"    pm.expect(project[\"end_date\"]).to.eq(pm.collectionVariables.get(\"end_date\"));\r",
									"    \r",
									"\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.clear();\r",
									"\r",
									"var name = \"Building Renovation\";\r",
									"var budget = 100;\r",
									"var description = \"Rebuild a building\" ;\r",
									"var start_date = \"2020-03-07\" ;\r",
									"var end_date = \"2022-04-07\";\r",
									"\r",
									"\r",
									"var req_body_test = JSON.stringify({\r",
									"    name: name,\r",
									"    budget: budget,\r",
									"    description: description,\r",
									"    start_date: start_date,\r",
									"    end_date: end_date\r",
									"    \r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"name\", name);\r",
									"pm.collectionVariables.set(\"budget\", budget);\r",
									"pm.collectionVariables.set(\"description\", description);\r",
									"pm.collectionVariables.set(\"start_date\", start_date);\r",
									"pm.collectionVariables.set(\"end_date\", end_date);\r",
									"\r",
									"pm.environment.set(\"req_body_test\", req_body_test);\r",
									"console.log(req_body_test);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{req_body_test}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app_url}}/projects",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "DELETE Team Member 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 status code\", function () {\r",
									"    //Check for 204 status code\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/team_members/{{team_member_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"team_members",
								"{{team_member_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Team Member 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 status code\", function () {\r",
									"    //Check for 204 status code\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/team_members/{{team_member_2}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"team_members",
								"{{team_member_2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Team Member 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 status code\", function () {\r",
									"    //Check for 204 status code\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/team_members/{{team_member_3}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"team_members",
								"{{team_member_3}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Team Member 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 status code\", function () {\r",
									"    //Check for 204 status code\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/team_members/{{team_member_4}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"team_members",
								"{{team_member_4}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Team Member 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 status code\", function () {\r",
									"    //Check for 204 status code\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/team_members/{{team_member_5}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"team_members",
								"{{team_member_5}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Team Member 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 status code\", function () {\r",
									"    //Check for 204 status code\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/team_members/{{team_member_6}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"team_members",
								"{{team_member_6}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Team Member 7",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 status code\", function () {\r",
									"    //Check for 204 status code\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/team_members/{{team_member_7}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"team_members",
								"{{team_member_7}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Client 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 status code\", function () {\r",
									"    //Check for 204 status code\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/clients/{{client_1}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"clients",
								"{{client_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Client 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 status code\", function () {\r",
									"    //Check for 204 status code\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/clients/{{client_2}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"clients",
								"{{client_2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Client 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 status code\", function () {\r",
									"    //Check for 204 status code\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/clients/{{client_3}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"clients",
								"{{client_3}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Client 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 status code\", function () {\r",
									"    //Check for 204 status code\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/clients/{{client_4}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"clients",
								"{{client_4}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Client 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 status code\", function () {\r",
									"    //Check for 204 status code\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/clients/{{client_5}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"clients",
								"{{client_5}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Client 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 status code\", function () {\r",
									"    //Check for 204 status code\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/clients/{{client_6}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"clients",
								"{{client_6}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Project 1 - User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 status code\", function () {\r",
									"    //Check for 204 status code\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/projects/{{user1_project1_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects",
								"{{user1_project1_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Project 2 - User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 status code\", function () {\r",
									"    //Check for 204 status code\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/projects/{{user1_project2_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects",
								"{{user1_project2_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Project 3 - User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 status code\", function () {\r",
									"    //Check for 204 status code\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/projects/{{user1_project3_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects",
								"{{user1_project3_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Project 4 - User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 status code\", function () {\r",
									"    //Check for 204 status code\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/projects/{{user1_project4_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects",
								"{{user1_project4_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Project 5 - User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 status code\", function () {\r",
									"    //Check for 204 status code\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/projects/{{user1_project5_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects",
								"{{user1_project5_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Project 6 - User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 status code\", function () {\r",
									"    //Check for 204 status code\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/projects/{{user1_project6_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects",
								"{{user1_project6_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Project 7- User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 status code\", function () {\r",
									"    //Check for 204 status code\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/projects/{{user1_project7_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects",
								"{{user1_project7_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Project 1 - User 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 status code\", function () {\r",
									"    //Check for 204 status code\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt2}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/projects/{{user2_project1_id}}",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"projects",
								"{{user2_project1_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE User 1 Admin Access Final",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 status code\", function () {\r",
									"    //Check for 204 status code\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app_url}}/admin",
							"host": [
								"{{app_url}}"
							],
							"path": [
								"admin"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "app_url",
			"value": "",
			"type": "string",
			"disabled": true
		},
		{
			"value": "",
			"disabled": true
		},
		{
			"value": "",
			"disabled": true
		},
		{
			"value": "",
			"disabled": true
		},
		{
			"value": "",
			"disabled": true
		},
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "budget",
			"value": ""
		},
		{
			"key": "description",
			"value": ""
		},
		{
			"key": "start_date",
			"value": ""
		},
		{
			"key": "end_date",
			"value": ""
		}
	]
}